
@article{ala-mutka_survey_2005-1,
  title = {A {{Survey}} of {{Automated Assessment Approaches}} for {{Programming Assignments}}},
  author = {{Ala-Mutka}, Kirsti M},
  year = {2005},
  month = jun,
  journal = {Computer Science Education},
  volume = {15},
  number = {2},
  pages = {83--102},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993400500150747},
  abstract = {Practical programming is one of the basic skills pursued in computer science education. On programming courses, the coursework consists of programming assignments that need to be assessed from different points of view. Since the submitted assignments are executable programs with a formal structure, some features can be assessed automatically. The basic requirement for automated assessment is the numerical measurability of assessment targets, but semiautomatic approaches can overcome this restriction. Recognizing automatically assessable features can help teachers to create educational models, where automatic tools let teachers concentrate their work on the learning issues that need student-teacher interaction the most. Several automatic tools for both static and dynamic assessment of computer programs have been reported in the literature. This article promotes these issues by surveying several automatic approaches for assessing programming assignments. Not all the existing tools will be covered, simply because of the vast number of them. The article concentrates on bringing forward different assessment techniques and approaches to give an interested reader starting points for finding further information in the area. Automatic assessment tools can be used to help teachers in grading tasks as well as to support students' working process with automatic feedback. Common advantages of automation are the speed, availability, consistency and objectivity of assessment. However, automatic tools emphasize the need for careful pedagogical design of the assignment and assessment settings. To effectively share the knowledge and good assessment solutions already developed, better interoperability and portability of the tools is needed.},
  annotation = {\_eprint: https://doi.org/10.1080/08993400500150747},
  file = {/Users/bedmison/Zotero/storage/RQWT2RTH/Ala-Mutka - 2005 - A Survey of Automated Assessment Approaches for Pr.pdf;/Users/bedmison/Zotero/storage/U2XD492H/08993400500150747.html}
}

@inproceedings{almeida-martinez_vast_2008,
  title = {{{VAST}}: Visualization of Abstract Syntax Trees within Language Processors Courses},
  shorttitle = {{{VAST}}},
  booktitle = {Proceedings of the 4th {{ACM}} Symposium on {{Software}} Visualization},
  author = {{Almeida-Mart{\'i}nez}, Francisco J. and {Urquiza-Fuentes}, Jaime and {Vel{\'a}zquez-Iturbide}, J. {\'A}ngel},
  year = {2008},
  month = sep,
  series = {{{SoftVis}} '08},
  pages = {209--210},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1409720.1409759},
  abstract = {In this poster we present VAST, a visualization tool to support teaching language processors. On the one hand, VAST provides an API that allows generating visualizations of abstract syntax trees (AST). This process is independent of the parser generator. On the other hand, VAST provides an advanced interface to animate the AST construction process and to cope with huge ones.},
  isbn = {978-1-60558-112-5},
  keywords = {abstract syntax trees,visualization},
  file = {/Users/bedmison/Zotero/storage/DRAR2GG8/Almeida-Mart√≠nez et al. - 2008 - VAST visualization of abstract syntax trees withi.pdf}
}

@inproceedings{barria-pineda_concept-level_2017,
  title = {Concept-{{Level Knowledge Visualization For Supporting Self-Regulated Learning}}},
  booktitle = {Proceedings of the 22nd {{International Conference}} on {{Intelligent User Interfaces Companion}}},
  author = {{Barria-Pineda}, Jordan and Guerra, Julio and Huang, Yun and Brusilovsky, Peter},
  year = {2017},
  month = mar,
  series = {{{IUI}} '17 {{Companion}}},
  pages = {141--144},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3030024.3038262},
  abstract = {Mastery Grids is an intelligent interface that provides access to different kinds of practice content for an introductory programming course. A distinctive feature of the interface is a parallel topic-level visualization of student progress and the progress of their peers. This contribution presents an extended version of the original system that features a fine-grained visualization of student knowledge on the level of the detailed concepts that are associated with the course. The student model is based on a Bayesian-network which is built using students performance history in the learning activities.},
  isbn = {978-1-4503-4893-5},
  keywords = {competency visualization,information visualization,open student model,social comparison,student modeling},
  file = {/Users/bedmison/Zotero/storage/7B9AXLM3/Barria-Pineda et al. - 2017 - Concept-Level Knowledge Visualization For Supporti.pdf}
}

@article{bart_computing_2017,
  title = {Computing with {{CORGIS}}: {{Diverse}}, {{Real-world Datasets}} for {{Introductory Computing}}},
  shorttitle = {Computing with {{CORGIS}}},
  author = {Bart, Austin Cory and Whitcomb, Ryan and Kafura, Dennis and Shaffer, Clifford A. and Tilevich, Eli},
  year = {2017},
  month = mar,
  journal = {ACM Inroads},
  volume = {8},
  number = {2},
  pages = {66--72},
  issn = {2153-2184},
  doi = {10.1145/3095781.3017708},
  abstract = {To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https://think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits.},
  keywords = {authenticity,big data,computational thinking,CORGIS,data science,motivation,pedagogy,real-world data},
  file = {/Users/bedmison/Zotero/storage/D8X7HX79/Bart et al. - 2017 - Computing with CORGIS Diverse, Real-world Dataset.pdf}
}

@inproceedings{bart_position_2015,
  title = {Position Paper: {{From}} Interest to Usefulness with {{BlockPy}}, a Block-Based, Educational Environment},
  shorttitle = {Position Paper},
  booktitle = {2015 {{IEEE Blocks}} and {{Beyond Workshop}} ({{Blocks}} and {{Beyond}})},
  author = {Bart, Austin Cory and Tilevich, Eli and Shaffer, Clifford A. and Kafura, Dennis},
  year = {2015},
  month = oct,
  pages = {87--89},
  doi = {10.1109/BLOCKS.2015.7369009},
  abstract = {As block-based environments are used for more mature audiences, the environments must mature themselves. Based on holistic theories of academic motivation, this means making the environment present itself as both interesting and useful, without sacrificing pedagogical power and scaffolding. We present Data Science as a potential context that satisfies all of these constraints, and describe our new block-based programming environment for education that supports data science from day one: BlockPy, available at http://think.cs.vt.edu/blockpy/. BlockPy features a number of powerful, authentic features meant to promote transfer for students to conventional environments as they progress. This includes mutual language translation and interactive feedback, but also powerful tools for getting real-world data and visualizing it. As we have developed the tool, we have identified a number of major research questions that should be answered in order to determine the validity of our hypothesis and the potential of our approach: in particular, how can this environment and context support educators and diverse learners as they progress into conventional environments.},
  keywords = {Context,Games,Programming environments,Programming profession,Sociology},
  file = {/Users/bedmison/Zotero/storage/WAF6VR3L/Bart et al. - 2015 - Position paper From interest to usefulness with B.pdf;/Users/bedmison/Zotero/storage/IFII5LXQ/7369009.html}
}

@article{ben-ari_decade_2011,
  title = {A Decade of Research and Development on Program Animation: {{The Jeliot}} Experience},
  shorttitle = {A Decade of Research and Development on Program Animation},
  author = {{Ben-Ari}, Mordechai and Bednarik, Roman and {Ben-Bassat Levy}, Ronit and Ebel, Gil and Moreno, Andr{\'e}s and Myller, Niko and Sutinen, Erkki},
  year = {2011},
  month = oct,
  journal = {Journal of Visual Languages \& Computing},
  volume = {22},
  number = {5},
  pages = {375--384},
  issn = {1045-926X},
  doi = {10.1016/j.jvlc.2011.04.004},
  abstract = {Jeliot is a program animation system for teaching and learning elementary programming that has been developed over the past decade, building on the Eliot animation system developed several years before. Extensive pedagogical research has been done on various aspects of the use of Jeliot including improvements in learning, effects on attention, and acceptance by teachers. This paper surveys this research and development, and summarizes the experience and the lessons learned.},
  langid = {english},
  keywords = {Attention,Conflictive animation,Eye tracking,Jeliot,Phenomenography,Program animation,Program visualization,Software visualization},
  file = {/Users/bedmison/Zotero/storage/3ZT53H3S/S1045926X11000310.html}
}

@incollection{bielikova_alef_2014,
  title = {{{ALEF}}: {{From Application}} to {{Platform}} for {{Adaptive Collaborative Learning}}},
  shorttitle = {{{ALEF}}},
  booktitle = {Recommender {{Systems}} for {{Technology Enhanced Learning}}: {{Research Trends}} and {{Applications}}},
  author = {Bielikov{\'a}, M{\'a}ria and {\v S}imko, Mari{\'a}n and Barla, Michal and Tvaro{\v z}ek, Jozef and Labaj, Martin and M{\'o}ro, R{\'o}bert and Srba, Ivan and {\v S}evcech, Jakub},
  editor = {Manouselis, Nikos and Drachsler, Hendrik and Verbert, Katrien and Santos, Olga C.},
  year = {2014},
  pages = {195--225},
  publisher = {{Springer}},
  address = {{New York, NY}},
  doi = {10.1007/978-1-4939-0530-0_10},
  abstract = {Web 2.0 has had a tremendous impact on education. It facilitates access and availability of learning content in variety of new formats, content creation, learning tailored to students' individual preferences, and collaboration. The range of Web 2.0 tools and features is constantly evolving, with focus on users and ways that enable users to socialize, share and work together on (user-generated) content. In this chapter we present ALEF\textemdash Adaptive Learning Framework that responds to the challenges posed on educational systems in Web 2.0 era. Besides its base functionality\textemdash to deliver educational content\textemdash ALEF particularly focuses on making the learning process more efficient by delivering tailored learning experience via personalized recommendation, and enabling learners to collaborate and actively participate in learning via interactive educational components. Our existing and successfully utilized solution serves as the medium for presenting key concepts that enable realizing Web 2.0 principles in education, namely lightweight models, and three components of framework infrastructure important for constant evolution and inclusion of students directly into the educational process\textemdash annotation framework, feedback infrastructure and widgets. These make possible to devise and implement various mechanisms for recommendation and collaboration\textemdash we also present selected methods for personalized recommendation and collaboration together with their evaluation in ALEF.},
  isbn = {978-1-4939-0530-0},
  langid = {english},
  keywords = {Adaptive learning,Collaborative learning,Educational platform,Personalized recommendation,Web 2.0},
  file = {/Users/bedmison/Zotero/storage/F3MX2Y6E/Bielikov√° et al. - 2014 - ALEF From Application to Platform for Adaptive Co.pdf}
}

@book{bloom_taxonomy_1956,
  title = {Taxonomy of Educational Objectives},
  author = {Bloom, Benjamin S.},
  year = {1956},
  publisher = {{DAVID McKAY COMPANY}},
  file = {/Users/bedmison/Zotero/storage/AJI7JZW2/Bloom et al -Taxonomy of Educational Objectives.pdf}
}

@incollection{brusilovsky_adaptive_2012,
  title = {Adaptive Hypermedia for Education and Training},
  booktitle = {Adaptive Technologies for Training and Education},
  author = {Brusilovsky, Peter},
  year = {2012},
  volume = {46},
  pages = {46--68},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge UK}},
  abstract = {Adaptive hypermedia (AH) is an alternative to the traditional, one-size-fits-all approach in the development of hypermedia systems. AH systems build a model of the goals, preferences, and knowledge of each individual user; this model is used throughout the interaction with the user to adapt to the needs of that particular user (Brusilovsky, 1996b).}
}

@inproceedings{brusilovsky_elm-art_1996,
  title = {{{ELM-ART}}: {{An}} Intelligent Tutoring System on World Wide Web},
  shorttitle = {{{ELM-ART}}},
  booktitle = {Intelligent {{Tutoring Systems}}},
  author = {Brusilovsky, Peter and Schwarz, Elmar and Weber, Gerhard},
  editor = {Frasson, Claude and Gauthier, Gilles and Lesgold, Alan},
  year = {1996},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {261--269},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-61327-7_123},
  abstract = {Making ITS available on the World Wide Web (WWW) is a way to integrate the flexibility and intelligence of ITS with world-wide availability of WWW applications. This paper discusses the problems of developing WWW-available ITS and, in particular, the problem of porting existing ITS to a WWW platform. We present the system ELM-ART which is a WWW-based ITS to support learning programming in Lisp. ELM-ART demonstrates how several known ITS technologies can be implemented in WWW context.},
  isbn = {978-3-540-68460-2},
  langid = {english},
  keywords = {Common Lisp,Electronic Textbook,Human Teacher,Intelligent Analysis,Manual Page},
  file = {/Users/bedmison/Zotero/storage/T2CPLYGR/Brusilovsky et al. - 1996 - ELM-ART An intelligent tutoring system on world w.pdf}
}

@inproceedings{brusilovsky_increasing_2014,
  title = {Increasing {{Adoption}} of {{Smart Learning Content}} for {{Computer Science Education}}},
  booktitle = {Proceedings of the {{Working Group Reports}} of the 2014 on {{Innovation}} \& {{Technology}} in {{Computer Science Education Conference}}},
  author = {Brusilovsky, Peter and Edwards, Stephen and Kumar, Amruth and Malmi, Lauri and Benotti, Luciana and Buck, Duane and Ihantola, Petri and Prince, Rikki and Sirki{\"a}, Teemu and Sosnovsky, Sergey and Urquiza, Jaime and Vihavainen, Arto and Wollowski, Michael},
  year = {2014},
  month = jun,
  series = {{{ITiCSE-WGR}} '14},
  pages = {31--57},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2713609.2713611},
  abstract = {Computer science educators are increasingly using interactive learning content to enrich and enhance the pedagogy of their courses. A plethora of such learning content, specifically designed for computer science education, such as visualization, simulation, and web-based environments for learning programming, are now available for various courses. We call such content smart learning content. However, such learning content is seldom used outside its host site despite the benefits it could offer to learners everywhere. In this paper, we investigate the factors that impede dissemination of such content among the wider computer science education community. To accomplish this we surveyed educators, existing tools and recent research literature to identify the current state of the art and analyzed the characteristics of a large number of smart learning content examples along canonical dimensions. In our analysis we focused on examining the technical issues that must be resolved to support finding, integrating and customizing smart learning content in computer science courses. Finally, we propose a new architecture for hosting, integrating and disseminating smart learning content and discuss how it could be implemented based on existing protocols and standards.},
  isbn = {978-1-4503-3406-8},
  keywords = {classroom management,computer science education,dissemination,educational research,educational tools,intelligent tutoring systems,smart learning content,teaching with technology,technology adoption,technology integration},
  file = {/Users/bedmison/Zotero/storage/S5XEQ2RS/Brusilovsky et al. - 2014 - Increasing Adoption of Smart Learning Content for .pdf}
}

@inproceedings{brusilovsky_knowledgezoom_2013,
  title = {{{KnowledgeZoom}} for {{Java}}: {{A Concept-Based Exam Study Tool}} with a {{Zoomable Open Student Model}}},
  shorttitle = {{{KnowledgeZoom}} for {{Java}}},
  booktitle = {2013 {{IEEE}} 13th {{International Conference}} on {{Advanced Learning Technologies}}},
  author = {Brusilovsky, Peter and Baishya, Dhruba and Hosseini, Roya and Guerra, Julio and Liang, Miner},
  year = {2013},
  month = jul,
  pages = {275--279},
  issn = {2161-377X},
  doi = {10.1109/ICALT.2013.86},
  abstract = {This paper presents our attempt to develop a personalized exam preparation tool for Java/OOP classes based on a fine-grained concept model of Java knowledge. Our goal was to explore two most popular student model-based approaches: open student modeling and problem sequencing. The result of our work is a Java exam preparation tool, Knowledge Zoom. The tool combines an open concept-level student model component, Knowledge Explorer and a concept-based sequencing component, Knowledge Maximizer into a single interface. This paper presents both components of Knowledge Zoom, reports results of its evaluation, and discusses lessons learned.},
  keywords = {Adaptation models,Adaptive systems,Color,Educational institutions,Java,Object oriented modeling,Open Student Modeling,Problem Sequencing,Progressive Zoom,Sequential analysis},
  file = {/Users/bedmison/Zotero/storage/CIWSCQS7/Brusilovsky et al. - 2013 - KnowledgeZoom for Java A Concept-Based Exam Study.pdf;/Users/bedmison/Zotero/storage/B3MXFE36/6601929.html}
}

@article{brusilovsky_learning_2010,
  title = {Learning {{SQL Programming}} with {{Interactive Tools}}: {{From Integration}} to {{Personalization}}},
  shorttitle = {Learning {{SQL Programming}} with {{Interactive Tools}}},
  author = {Brusilovsky, Peter and Sosnovsky, Sergey and Yudelson, Michael V. and Lee, Danielle H. and Zadorozhny, Vladimir and Zhou, Xin},
  year = {2010},
  month = jan,
  journal = {ACM Transactions on Computing Education},
  volume = {9},
  number = {4},
  pages = {19:1--19:15},
  doi = {10.1145/1656255.1656257},
  abstract = {Rich, interactive eLearning tools receive a lot of attention nowadays from both practitioners and researchers. However, broader dissemination of these tools is hindered by the technical difficulties of their integration into existing platforms. This article explores the technical and conceptual problems of using several interactive educational tools in the context of a single course. It presents an integrated Exploratorium for database courses, an experimental platform, which provides personalized access to several types of interactive learning activities. Several classroom studies of the Exploratorium have demonstrated its value in both the integration of several tools and the provision of personalized access.},
  keywords = {Adaptive educational system,adaptive hypermedia,integrated learning environment,SQL},
  file = {/Users/bedmison/Zotero/storage/QSUVCFV7/Brusilovsky et al. - 2010 - Learning SQL Programming with Interactive Tools F.pdf}
}

@inproceedings{brusilovsky_user_2005,
  title = {User {{Modeling}} in a {{Distributed E-Learning Architecture}}},
  booktitle = {User {{Modeling}} 2005},
  author = {Brusilovsky, Peter and Sosnovsky, Sergey and Shcherbinina, Olena},
  editor = {Ardissono, Liliana and Brna, Paul and Mitrovic, Antonija},
  year = {2005},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {387--391},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11527886_50},
  abstract = {This paper is focused on user modeling and adaptation in distributed E-Learning systems. We describe here CUMULATE, a generic student modeling server developed for a distributed E-Learning architecture, KnowledgeTree. We also introduce a specific, topic-based knowledge modeling approach which has been implemented as an inference agent in CUMULATE and used in QuizGuide, an adaptive system that helps students select the most relevant self-assessment quizzes. We also discuss our attempts to evaluate this multi-level student modeling.},
  isbn = {978-3-540-31878-1},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/CB5S7MEY/Brusilovsky et al. - 2005 - User Modeling in a Distributed E-Learning Architec.pdf}
}

@inproceedings{chau_content_2017,
  title = {Content {{Wizard}}: {{Concept-Based Recommender System}} for {{Instructors}} of {{Programming Courses}}},
  shorttitle = {Content {{Wizard}}},
  booktitle = {Adjunct {{Publication}} of the 25th {{Conference}} on {{User Modeling}}, {{Adaptation}} and {{Personalization}}},
  author = {Chau, Hung and {Barria-Pineda}, Jordan and Brusilovsky, Peter},
  year = {2017},
  month = jul,
  series = {{{UMAP}} '17},
  pages = {135--140},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3099023.3099039},
  abstract = {Authoring an adaptive educational system is a complex process that involves allocating a large range of educational content within a fixed sequence of units. In this paper, we describe Content Wizard, a concept-based recommender system for recommending learning materials that meet the instructor's pedagogical goals during the creation of an online programming course. Here, the instructors are asked to provide a set of code examples that jointly reflect the learning goals that are associated with each course unit. The Wizard is built on top of our course-authoring tool, and it helps to decrease the time instructors spend on the task and to maintain the coherence of the sequential structure of the course. It also provides instructors with additional information to identify content that might be not appropriate for the unit they are creating. We conducted an off-line study with data collected from an introductory Java course previously taught at the University of Pittsburgh in order to evaluate both the practicality and effectiveness of the system. We found that the proposed recommendation's performance is relatively close to the teacher's expectation in creating a computer-based adaptive course.},
  isbn = {978-1-4503-5067-9},
  keywords = {concept-based recommendation,course authoring,learning content recommendation},
  file = {/Users/bedmison/Zotero/storage/M8INU95R/Chau et al. - 2017 - Content Wizard Concept-Based Recommender System f.pdf}
}

@article{cooper_open_2014,
  title = {Open Source Software and the Algorithm Visualization Community},
  author = {Cooper, Matthew L. and Shaffer, Clifford A. and Edwards, Stephen H. and Ponce, Sean P.},
  year = {2014},
  month = aug,
  journal = {Science of Computer Programming},
  series = {Software {{Development Concerns}} in the E-{{Learning Domain}}},
  volume = {88},
  pages = {82--91},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2013.12.008},
  abstract = {Algorithm visualizations are widely viewed as having the potential for major impact on computer science education, but their quality is highly variable. We report on the software development practices used by creators of algorithm visualizations, based on data that can be inferred from a catalog of over 600 algorithm visualizations. Since nearly all are free for use and many provide source code, they might be construed as being open source software. Yet many AV developers do not appear to have used open source best practices. We discuss how such development practices might be employed by the algorithm visualization community, and how they might lead to improved algorithm visualizations in the future. We conclude with a discussion of OpenDSA, an open-source project that builds on earlier progress in the field of algorithm visualization and hopes to use open-source procedures to gain users and contributors.},
  langid = {english},
  keywords = {Algorithm animation,Open source licensing,Open source tools,Project hosting,Version control},
  file = {/Users/bedmison/Zotero/storage/Z6JJGS9D/Cooper et al. - 2014 - Open source software and the algorithm visualizati.pdf;/Users/bedmison/Zotero/storage/CCUBSDAI/S0167642314000021.html}
}

@inproceedings{cross_ii_combining_2011,
  title = {Combining {{Dynamic Program Viewing}} and {{Testing}} in {{Early Computing Courses}}},
  booktitle = {2011 {{IEEE}} 35th {{Annual Computer Software}} and {{Applications Conference}}},
  author = {Cross II, James H. and Hendrix, T. Dean and Barowski, Larry A.},
  year = {2011},
  month = jul,
  pages = {184--192},
  issn = {0730-3157},
  doi = {10.1109/COMPSAC.2011.31},
  abstract = {Dynamic program viewing is a form of visual verification in which a student executes one or more statements in a program and interactively observes the behavior in basic viewers (e.g., an object with its fields) and/or conceptual viewers (e.g., the structural display of binary search tree). This activity can be extremely useful from a program understanding perspective as well as a debugging perspective. In contrast, testing (e.g., with JUnit) provides a way to create persistent test cases and then run and re-run them in an efficient way. We have observed that dynamic program viewing and testing are quite complementary. When test cases are written and executed, dynamic program viewing becomes a valuable aid in traditional debugging as well. Since most test cases are written at the functional level (e.g., did a method return the expected value?), dynamically viewing test methods as they execute can provide students with a deeper level of understanding. The jGRASP IDE has been extended to allow students to combine dynamic program viewing with JUnit testing. In this paper, we discuss both the technical success of this effort and several examples that demonstrate the potential for student use in early computing courses.},
  keywords = {Animation,Arrays,data structures,Data visualization,dynamic viewing,JUnit testing debugging,Software,Testing,visualization,Visualization},
  file = {/Users/bedmison/Zotero/storage/A668JNJQ/Cross II et al. - 2011 - Combining Dynamic Program Viewing and Testing in E.pdf;/Users/bedmison/Zotero/storage/RMEHD8K7/6032341.html}
}

@article{dietrich_animated_2015,
  title = {An {{Animated Introduction}} to {{Relational Databases}} for {{Many Majors}}},
  author = {Dietrich, Suzanne W. and Goelman, Don and Borror, Connie M. and Crook, Sharon M.},
  year = {2015},
  month = may,
  journal = {IEEE Transactions on Education},
  volume = {58},
  number = {2},
  pages = {81--89},
  issn = {1557-9638},
  doi = {10.1109/TE.2014.2326834},
  abstract = {Database technology affects many disciplines beyond computer science and business. This paper describes two animations developed with images and color that visually and dynamically introduce fundamental relational database concepts and querying to students of many majors. The goal is for educators in diverse academic disciplines to incorporate the animations in their existing courses in order to meet their pedagogical needs. The introduction of the animations was assessed and evaluated within several contexts, including non-majors courses offered by computer scientists as well as a course on computational molecular biology. The evaluation indicated that student knowledge of fundamental database concepts improved significantly with the use of the courseware. The animations provide visual learners with an engaging method to learn the topics presented with the ability to replay the dynamic presentation. Overall, the evaluation indicates the accessibility of database topics across the disciplines as well as the specific concepts that need further elaboration.},
  keywords = {Animation,Computer science,Computer science education,courseware,Courseware,Educational institutions,querying,relational databases,Relational databases,visualization,Visualization},
  file = {/Users/bedmison/Zotero/storage/F79ISFYG/Dietrich et al. - 2015 - An Animated Introduction to Relational Databases f.pdf;/Users/bedmison/Zotero/storage/2TMWEW8T/6827953.html}
}

@book{durlach_adaptive_2012,
  title = {Adaptive {{Technologies}} for {{Training}} and {{Education}}},
  author = {Durlach, Paula J. and Lesgold, Alan M.},
  year = {2012},
  month = feb,
  publisher = {{Cambridge University Press}},
  abstract = {This edited volume provides an overview of the latest advancements in adaptive training technology. Intelligent tutoring has been deployed for well-defined and relatively static educational domains such as algebra and geometry. However, this adaptive approach to computer-based training has yet to come into wider usage for domains that are less well defined or where student-system interactions are less structured, such as during scenario-based simulation and immersive serious games. In order to address how to expand the reach of adaptive training technology to these domains, leading experts in the field present their work in areas such as student modeling, pedagogical strategy, knowledge assessment, natural language processing, and virtual human agents. Several approaches to designing adaptive technology are discussed for both traditional educational settings and professional training domains. This book will appeal to anyone concerned with educational and training technology at a professional level, including researchers, training systems developers, and designers.},
  googlebooks = {mOlPSl6iJaIC},
  isbn = {978-0-521-76903-7},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / Internet / General,Computers / Social Aspects,Education / Computers \& Technology,Education / Educational Psychology,Education / General,Psychology / General}
}

@inproceedings{farghally_evaluating_2017,
  title = {Evaluating the {{Effectiveness}} of {{Algorithm Analysis Visualizations}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Farghally, Mohammed F. and Koh, Kyu Han and Shahin, Hossameldin and Shaffer, Clifford A.},
  year = {2017},
  month = mar,
  series = {{{SIGCSE}} '17},
  pages = {201--206},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3017680.3017698},
  abstract = {Algorithm Visualizations (AVs) have been used for years as an interactive method to convey data structures and algorithms concepts. However, AVs have traditionally focused on illustrating the mechanics of how an algorithm works. We have developed visualizations that we name Algorithm Analysis Visualizations (AAVs), that focus on conveying algorithm analysis concepts. We present our findings from an initial evaluation study of the effectiveness of AAVs when applied to a semester long Data Structures course. AAVs were evaluated in terms of student engagement, student satisfaction, and student performance. Results indicate that the intervention group students spent significantly more time with the AAVs than did the control group students who used primarily textual content. Students gave positive feedback regarding the usefulness of the AAVs in illustrating algorithm analysis concepts. Students from the intervention group had better performance on the algorithm analysis part of the final exam than did control group students.},
  isbn = {978-1-4503-4698-6},
  keywords = {algorithm analysis visualizations,log data analysis,performance evaluation},
  file = {/Users/bedmison/Zotero/storage/IAYUQPLY/Farghally et al. - 2017 - Evaluating the Effectiveness of Algorithm Analysis.pdf}
}

@inproceedings{farzan_social_2006,
  title = {Social {{Navigation Support}} in a {{Course Recommendation System}}},
  booktitle = {Adaptive {{Hypermedia}} and {{Adaptive Web-Based Systems}}},
  author = {Farzan, Rosta and Brusilovsky, Peter},
  editor = {Wade, Vincent P. and Ashman, Helen and Smyth, Barry},
  year = {2006},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {91--100},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11768012_11},
  abstract = {The volume of course-related information available to students is rapidly increasing. This abundance of information has created the need to help students find, organize, and use resources that match their individual goals, interests, and current knowledge. Our system, CourseAgent, presented in this paper, is an adaptive community-based hypermedia system, which provides social navigation course recommendations based on students' assessment of course relevance to their career goals. CourseAgent obtains students' explicit feedback as part of their natural interactivity with the system. This work presents our approach to eliciting explicit student feedback and then evaluates this approach.},
  isbn = {978-3-540-34697-5},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/QQPCE3D5/Farzan and Brusilovsky - 2006 - Social Navigation Support in a Course Recommendati.pdf}
}

@article{felder_learning_1988,
  title = {{{LEARNING AND TEACHING STYLES IN ENGINEERING EDUCATION}}},
  author = {Felder, Richard M},
  year = {1988},
  journal = {Engineering education},
  volume = {78},
  number = {7},
  pages = {674--681},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/RY3DKV8Q/Felder - LEARNING AND TEACHING STYLES IN ENGINEERING EDUCAT.pdf}
}

@article{fouh_exploring_2014,
  title = {Exploring Students Learning Behavior with an Interactive Etextbook in Computer Science Courses},
  author = {Fouh, Eric and Breakiron, Daniel A. and Hamouda, Sally and Farghally, Mohammed F. and Shaffer, Clifford A.},
  year = {2014},
  month = dec,
  journal = {Computers in Human Behavior},
  volume = {41},
  pages = {478--485},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2014.09.061},
  abstract = {We present empirical findings from using an interactive electronic textbook (eTextbook) system named OpenDSA to teach sophomore- and junior-level Computer Science courses. The web-based eTextbook infrastructure allows us to collect large amounts of data that can provide detailed information about students' study behavior. In particular we were interested in seeing if the students will attempt to manipulate the electronic resources so as to receive credit without deeply going through the materials. We found that a majority of students do not read the text. On the other hand, we found evidence that students voluntarily complete additional exercises (after obtaining credit for completion) as a study aid prior to exams. We determined that visualization use was fairly high (even when credit for their completion was not offered). Skipping to the end of slideshows was more common when credit for their completion was offered, but also occurred when it was not. We measured the level of use of mobile devices for learning by CS students. Almost all students did not associate their mobile devices with studying. The only time they accessed OpenDSA from a mobile device was for a quick look up, and never for in depth study.},
  langid = {english},
  keywords = {Computing education,eTextbook,Learning behavior,Mobile learning},
  file = {/Users/bedmison/Zotero/storage/AKDKP54Q/S0747563214005196.html}
}

@article{fouh_role_2012,
  title = {The {{Role}} of {{Visualization}} in {{Computer Science Education}}},
  author = {Fouh, Eric and Akbar, Monika and Shaffer, Clifford A.},
  year = {2012},
  month = jan,
  journal = {Computers in the Schools},
  volume = {29},
  number = {1-2},
  pages = {95--117},
  publisher = {{Routledge}},
  issn = {0738-0569},
  doi = {10.1080/07380569.2012.651422},
  abstract = {Computer science core instruction attempts to provide a detailed understanding of dynamic processes such as the working of an algorithm or the flow of information between computing entities. Such dynamic processes are not well explained by static media such as text and images, and are difficult to convey in lecture. The authors survey the history of visualization in computer science education, focusing on artifacts that have a documented positive educational assessment. Changes in how computing technology has affected the development and uptake of such visualization artifacts in computer science education, and how recent technology changes are leading to progress in developing online hypertextbooks are then discussed.},
  keywords = {algorithm visualization,data structure visualization,eTextbooks,hypertextbooks,program visualization},
  annotation = {\_eprint: https://doi.org/10.1080/07380569.2012.651422},
  file = {/Users/bedmison/Zotero/storage/WIYHKS73/Fouh et al. - 2012 - The Role of Visualization in Computer Science Educ.pdf;/Users/bedmison/Zotero/storage/UTNZXBYQ/07380569.2012.html}
}

@inproceedings{glassman_feature_2014,
  title = {Feature Engineering for Clustering Student Solutions},
  booktitle = {Proceedings of the First {{ACM}} Conference on {{Learning}} @ Scale Conference},
  author = {Glassman, Elena L. and Singh, Rishabh and Miller, Robert C.},
  year = {2014},
  month = mar,
  series = {L@{{S}} '14},
  pages = {171--172},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2556325.2567865},
  abstract = {Open-ended homework problems such as coding assignments give students a broad range of freedom for the design of solutions. We aim to use the diversity in correct solutions to enhance student learning by automatically suggesting alternate solutions. Our approach is to perform a two-level hierarchical clustering of student solutions to first partition them based on the choice of algorithm and then partition solutions implementing the same algorithm based on low-level implementation details. Our initial investigations in domains of introductory programming and computer architecture demonstrate that we need two different classes of features to perform effective clustering at the two levels, namely abstract features and concrete features.},
  isbn = {978-1-4503-2669-8},
  keywords = {algorithm recognition,feature engineering,program comprehension},
  file = {/Users/bedmison/Zotero/storage/3BH33Z69/Glassman et al. - 2014 - Feature engineering for clustering student solutio.pdf}
}

@article{grillmeyer_interactive_1999,
  title = {An Interactive Multimedia Textbook for Introductory Computer Science},
  author = {Grillmeyer, Oliver},
  year = {1999},
  month = mar,
  journal = {ACM SIGCSE Bulletin},
  volume = {31},
  number = {1},
  pages = {286--290},
  issn = {0097-8418},
  doi = {10.1145/384266.299789},
  abstract = {A multimedia implementation of an introductory computer science text based on the LISP dialect Scheme, is described. The text, Exploring Computer Science with Scheme [4], is designed for beginning students who may have no prior experience using computers. The goal is to create an environment that facilitates learning of the material and concepts in the text. The multimedia system includes hypertext abilities to jump through the text, search, and mark positions in the text. A personal notebook facility is provided that allows the user to enter notes while using the system or to copy sections of the text or Scheme environment directly into the notebook. The tool provides an animation feature that illustrates how various list and applicative functions work by modeling their internal actions. A Scheme listener is built into the tool to foster testing ideas and experimentation. Since the intended audience of the text includes people with no prior computing experience, the user interface is intuitive and full help features are provided.},
  file = {/Users/bedmison/Zotero/storage/KV88S6EH/Grillmeyer - 1999 - An interactive multimedia textbook for introductor.pdf}
}

@inproceedings{guerra_intelligent_2016,
  title = {An {{Intelligent Interface}} for {{Learning Content}}: {{Combining}} an {{Open Learner Model}} and {{Social Comparison}} to {{Support Self-Regulated Learning}} and {{Engagement}}},
  shorttitle = {An {{Intelligent Interface}} for {{Learning Content}}},
  booktitle = {Proceedings of the 21st {{International Conference}} on {{Intelligent User Interfaces}}},
  author = {Guerra, Julio and Hosseini, Roya and Somyurek, Sibel and Brusilovsky, Peter},
  year = {2016},
  month = mar,
  series = {{{IUI}} '16},
  pages = {152--163},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2856767.2856784},
  abstract = {We present the Mastery Grids system, an intelligent interface for online learning content that combines open learner modeling (OLM) and social comparison features. We grounded the design of Mastery Grids in self-regulated learning and learning motivation theories, as well as in our past work in social comparison, OLM, and adaptive navigation support. The force behind the interface is the combination of adaptive navigation functionality with the mastery-oriented aspects of OLM and the performance-oriented aspects of social comparison. We examined different configurations of Mastery Grids in two classroom studies and report the results of analysis of log data and survey responses. The results show how Mastery Grids interacts with different factors, like gender and achievement-goal orientation, and ultimately, its impact on student engagement, performance, and motivation.},
  isbn = {978-1-4503-4137-0},
  keywords = {achievement-goal orientation,open learner model,self-regulated learning,social comparison},
  file = {/Users/bedmison/Zotero/storage/XQ5L4N3G/Guerra et al. - 2016 - An Intelligent Interface for Learning Content Com.pdf}
}

@article{higgins_coursemarker_2003,
  title = {The {{CourseMarker CBA System}}: {{Improvements}} over {{Ceilidh}}},
  shorttitle = {The {{CourseMarker CBA System}}},
  author = {Higgins, Colin and Hegazy, Tarek and Symeonidis, Pavlos and Tsintsifas, Athanasios},
  year = {2003},
  month = sep,
  journal = {Education and Information Technologies},
  volume = {8},
  number = {3},
  pages = {287--304},
  issn = {1573-7608},
  doi = {10.1023/A:1026364126982},
  abstract = {This document reports on the results of re-designing and re-implementing the Ceilidh courseware system. It highlights the limitations identified in the thirteen years of Ceilidh's use at the University of Nottingham. It also illustrates how most of these limitations have been resolved by re-designing Ceilidh's architecture and improving various aspects of the marking and administrating processes. The new system, entitled CourseMarker, offers enhanced functionality by adding useful features that have long been needed by Ceilidh's community. The paper concludes with an evaluation of the changes and a brief report on the experience of CourseMarker's use over the last three years. Finally, recent developments and future directions are discussed.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/F59K4XGR/Higgins et al. - 2003 - The CourseMarker CBA System Improvements over Cei.pdf}
}

@inproceedings{hosseini_animated_2016,
  title = {Animated {{Examples}} as {{Practice Content}} in a {{Java Programming Course}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}},
  author = {Hosseini, Roya and Sirki{\"a}, Teemu and Guerra, Julio and Brusilovsky, Peter and Malmi, Lauri},
  year = {2016},
  month = feb,
  series = {{{SIGCSE}} '16},
  pages = {540--545},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2839509.2844639},
  abstract = {Code examples are commonly used learning resources that help students grasp various programming structures and concepts. However, example code usually requires explanations about what each line or part of the code does. Otherwise, students may find it difficult to follow an example. In this paper, we compare two types of code examples that use different techniques to describe important concepts in the code: annotated and animated examples. The former displays an explanation for a subset of lines in plain text, whereas the latter visualizes code execution. We studied the use and impact of these enhanced examples, provided as non-mandatory practice content, in three introductory Java courses. Our results suggest that animated examples are more engaging and have a positive impact on students' learning. As compared to annotated examples, students spent more time with animated examples and more likely completed them. Also, a positive relationship was found between the number of explored animated examples and the overall course grade.},
  isbn = {978-1-4503-3685-7},
  keywords = {animated examples,annotated examples,code examples,java programming,learning,program visualization},
  file = {/Users/bedmison/Zotero/storage/A29G5VNJ/Hosseini et al. - 2016 - Animated Examples as Practice Content in a Java Pr.pdf}
}

@inproceedings{hosseini_stereotype_2017,
  title = {Stereotype {{Modeling}} for {{Problem-Solving Performance Predictions}} in {{MOOCs}} and {{Traditional Courses}}},
  booktitle = {Proceedings of the 25th {{Conference}} on {{User Modeling}}, {{Adaptation}} and {{Personalization}}},
  author = {Hosseini, Roya and Brusilovsky, Peter and Yudelson, Michael and Hellas, Arto},
  year = {2017},
  month = jul,
  series = {{{UMAP}} '17},
  pages = {76--84},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3079628.3079672},
  abstract = {Stereotypes are frequently used in real life to classify students according to their performance in class. In literature, we can find many references to weaker students, fast learners, struggling students, etc. Given the lack of detailed data about students, these or other kinds of stereotypes could be potentially used for user modeling and personalization in the educational context. Recent research in MOOC context demonstrated that data-driven learner stereotypes could work well for detecting and preventing student dropouts. In this paper, we are exploring the application of stereotype-based modeling to a more challenging task -- predicting student problem-solving and learning in two programming courses and two MOOCs. We explore traditional stereotypes based on readily available factors like gender or education level as well as some advanced data-driven approaches to group students based on their problem-solving behavior. Each of the approaches to form student stereotype cohorts is validated by comparing models of student learning: do students in different groups learn differently? In the search for the stereotypes that could be used for adaptation, the paper examines ten approaches. We compare the performance of these approaches and draw conclusions for future research.},
  isbn = {978-1-4503-4635-1},
  keywords = {individual differences,java,mooc,student modeling},
  file = {/Users/bedmison/Zotero/storage/HKKKCQM5/Hosseini et al. - 2017 - Stereotype Modeling for Problem-Solving Performanc.pdf}
}

@inproceedings{hosseini_what_2015,
  title = {What {{Should I Do Next}}? {{Adaptive Sequencing}} in the {{Context}} of {{Open Social Student Modeling}}},
  shorttitle = {What {{Should I Do Next}}?},
  booktitle = {Design for {{Teaching}} and {{Learning}} in a {{Networked World}}},
  author = {Hosseini, Roya and Hsiao, I-Han and Guerra, Julio and Brusilovsky, Peter},
  editor = {Conole, Gr{\'a}inne and Klobu{\v c}ar, Toma{\v z} and Rensing, Christoph and Konert, Johannes and Lavou{\'e}, Elise},
  year = {2015},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {155--168},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-24258-3_12},
  abstract = {One of the original goals of intelligent educational systems was to guide each student to the most appropriate educational content. In previous studies, we explored both knowledge-based and social guidance approaches and learned that each has a weak side. In the present work, we have explored the idea of combining social guidance with more traditional knowledge-based guidance systems in hopes of supporting more optimal content navigation. We propose a greedy sequencing approach aimed at maximizing each student's level of knowledge and implemented it in the context of an open social student modeling interface. We performed a classroom study to examine the impact of this combined guidance approach. The results of our classroom study show that a greedy guidance approach positively affected students' navigation, increased the speed of learning for strong students, and improved the overall performance of students, both within the system and through end-of-course assessments.},
  isbn = {978-3-319-24258-3},
  langid = {english},
  keywords = {Adaptive navigation support,E-learning,Java programming,Open social student modeling,Personalized guidance},
  file = {/Users/bedmison/Zotero/storage/N5EXY7N8/Hosseini et al. - 2015 - What Should I Do Next Adaptive Sequencing in the .pdf}
}

@inproceedings{hovemeyer_cloudcoder_2013,
  title = {{{CloudCoder}}: Building a Community for Creating, Assigning, Evaluating and Sharing Programming Exercises (Abstract Only)},
  shorttitle = {{{CloudCoder}}},
  booktitle = {Proceeding of the 44th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Hovemeyer, David and Hertz, Matthew and Denny, Paul and Spacco, Jaime and Papancea, Andrei and Stamper, John and Rivers, Kelly},
  year = {2013},
  month = mar,
  series = {{{SIGCSE}} '13},
  pages = {742},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2445196.2445451},
  abstract = {Automatically-tested online programming exercises can be useful in introductory programming courses as self-tests to accompany readings, for in-class assessment, for skills development, and to provide additional practice for students who need it. CloudCoder (http://cloudcoder.org) is an effort to build a community based on an open-source programming exercise system (currently supporting C, Java, and Python) tightly integrated with a repository of freely-redistributable programming exercises written and used by members of the community. The goal of the project is to make programming exercises easy and free to incorporate into any programming course.},
  isbn = {978-1-4503-1868-6},
  keywords = {automated testing,cloudcoder,cs1}
}

@article{hovemeyer_cloudcoder_2013-1,
  title = {{{CloudCoder}}: A Web-Based Programming Exercise System},
  shorttitle = {{{CloudCoder}}},
  author = {Hovemeyer, David and Spacco, Jaime},
  year = {2013},
  month = jan,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {28},
  number = {3},
  pages = {30},
  issn = {1937-4771},
  abstract = {CloudCoder is a web-based programming exercise system designed for introductory programming courses. Using CloudCoder, instructors can assign practice problems to reinforce concepts and assess mastery of skills. Students access their assigned problems using a web browser. A typical problem asks the student to write a function or complete program to perform a simple task such as classifying input or performing a computation on input data. When the student submits her solution to a problem, the server tests her code against a series of test cases designed by the instructor and reports which tests executed correctly. CloudCoder is inspired by existing systems such as Codingbat, but is designed to be installed and used widely. As such, CloudCoder is open source (https://github.com/daveho/CloudCoder) and supports programming exercises in multiple languages (currently C, Java, and Python).}
}

@inproceedings{hovemeyer_control-flow-only_2016,
  title = {Control-{{Flow-Only Abstract Syntax Trees}} for {{Analyzing Students}}' {{Programming Progress}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Hovemeyer, David and Hellas, Arto and Petersen, Andrew and Spacco, Jaime},
  year = {2016},
  month = aug,
  series = {{{ICER}} '16},
  pages = {63--72},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2960310.2960326},
  abstract = {The abstraction of student code for use in automated analysis is a key challenge. The code must be processed in a manner that reveals interesting properties while reducing the "noise" introduced by less important details. In this work, we investigate the importance of control flow as a property in the analysis of students' programming processes. We introduce the Control-Flow Abstract Syntax Tree (CFAST), a representation of source code that focuses on control structures, and apply it in an analysis of a large, multinational dataset of introductory programming exercises. We provide data on how many different control-flow designs are observed, how quickly students identify a "correct" control flow structure, and how much additional work is required to convert a correct structure to a correct program. Our results indicate that while even simple problems yield a surprising number of CFASTs, the work of most students can be mapped to a small number of CFASTs. CFASTs that map to fewer submissions tend to be larger, and more complex, but they can still correspond to "correct" solutions to the problem.},
  isbn = {978-1-4503-4449-4},
  keywords = {cs1,educational data mining,learning analytics,source code snapshot analysis},
  file = {/Users/bedmison/Zotero/storage/YGHTSJEZ/Hovemeyer et al. - 2016 - Control-Flow-Only Abstract Syntax Trees for Analyz.pdf}
}

@inproceedings{hovemeyer_progsnap_2017,
  title = {Progsnap: {{Sharing Programming Snapshots}} for {{Research}} ({{Abstract Only}})},
  shorttitle = {Progsnap},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Hovemeyer, David and Hellas, Arto and Petersen, Andrew and Spacco, Jaime},
  year = {2017},
  month = mar,
  series = {{{SIGCSE}} '17},
  pages = {709},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3017680.3022418},
  abstract = {Recent years have seen increasing interest in using programming snapshot data for education research. One barrier to such research, especially for studies involving data from multiple institutions, is that the data is in a wide variety of native formats, and those formats may not be conducive to automated analysis. To overcome this barrier, we propose a structured data model and archival data format called Progsnap (https://cloudcoderdotorg.github.io/progsnap-spec/). Progsnap is designed to be a neutral export format, is currently supported by two open-source programming exercise systems, and we believe will be an easy target for data export from other systems. An open source Python library makes it easy to automate analysis of Progsnap datasets.},
  isbn = {978-1-4503-4698-6},
  keywords = {educational data mining,learning analytics,programming snapshots}
}

@inproceedings{hovemeyer_using_2014,
  title = {Using and Sharing Programming Exercises to Improve Introductory Courses (Abstract Only)},
  booktitle = {Proceedings of the 45th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Hovemeyer, David and Spacco, Jaime and Duvall, Robert and Edwards, Stephen and Kumar, Amruth and Petersen, Andrew and Zingaro, Daniel},
  year = {2014},
  month = mar,
  series = {{{SIGCSE}} '14},
  pages = {737},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2538862.2544261},
  abstract = {Short, automatically-assessed programming exercises, and other types of short practice problems, are a useful way to introduce and reinforce concepts and techniques in introductory programming courses. When delivered over the web, they allow students to learn and practice, with immediate feedback, at any time and place where they have access to a web browser. However, such exercises do not seem to be as widely used as they could be. Similarly, there is not a lot of literature on the effectiveness of these types of problems. The purpose of this BOF is to bring together users (and potential users) of programming exercises with developers of programming exercise systems to discuss how exercises could be used more widely and effectively. Possible discussion topics include: What features are absolutely essential for faculty to consider adoption? What are the major obstacles preventing more widespread adoption? Are faculty willing to share their exercises under an open/non-commercial license? Should exercises best used for extra practice, as graded assignments, or both?},
  isbn = {978-1-4503-2605-6},
  keywords = {computer science education,online exercises}
}

@article{hsiao_guiding_2010,
  title = {Guiding Students to the Right Questions: Adaptive Navigation Support in an {{E-Learning}} System for {{Java}} Programming},
  shorttitle = {Guiding Students to the Right Questions},
  author = {Hsiao, I.-H. and Sosnovsky, S. and Brusilovsky, P.},
  year = {2010},
  journal = {Journal of Computer Assisted Learning},
  volume = {26},
  number = {4},
  pages = {270--283},
  issn = {1365-2729},
  doi = {10.1111/j.1365-2729.2010.00365.x},
  abstract = {Rapid growth of the volume of interactive questions available to the students of modern E-Learning courses placed the problem of personalized guidance on the agenda of E-Learning researchers. Without proper guidance, students frequently select too simple or too complicated problems and ended either bored or discouraged. This paper explores a specific personalized guidance technology known as adaptive navigation support. We developed JavaGuide, a system, which guides students to appropriate questions in a Java programming course, and investigated the effect of personalized guidance a three-semester long classroom study. The results of this study confirm the educational and motivational effects of adaptive navigation support.},
  langid = {english},
  keywords = {adaptive annotation,adaptive navigation support,E-Learning,Java programming,personalized guidance},
  annotation = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1365-2729.2010.00365.x},
  file = {/Users/bedmison/Zotero/storage/2K4W35IP/Hsiao et al. - 2010 - Guiding students to the right questions adaptive .pdf;/Users/bedmison/Zotero/storage/5GUQ27BX/j.1365-2729.2010.00365.html}
}

@article{hyvonen_trakla_1993,
  title = {{{TRAKLA}} - {{A System}} for {{Teaching Algorithms Using Email}} and a {{Graphical Editor}}},
  author = {Hyv{\"o}nen, Juha and Malmi, Lauri},
  year = {1993},
  journal = {HYPERMEDIA, Vaasa, 1993},
  pages = {141--147},
  publisher = {{VAASAN YLIOPISTO}},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/85TPWCLZ/trakla-a-system-for-teaching-algorithms-using-email-and-a-graphic-2.html}
}

@inproceedings{ihantola_educational_2015,
  title = {Educational {{Data Mining}} and {{Learning Analytics}} in {{Programming}}: {{Literature Review}} and {{Case Studies}}},
  shorttitle = {Educational {{Data Mining}} and {{Learning Analytics}} in {{Programming}}},
  booktitle = {Proceedings of the 2015 {{ITiCSE}} on {{Working Group Reports}}},
  author = {Ihantola, Petri and Vihavainen, Arto and Ahadi, Alireza and Butler, Matthew and B{\"o}rstler, J{\"u}rgen and Edwards, Stephen H. and Isohanni, Essi and Korhonen, Ari and Petersen, Andrew and Rivers, Kelly and Rubio, Miguel {\'A}ngel and Sheard, Judy and Skupas, Bronius and Spacco, Jaime and Szabo, Claudia and Toll, Daniel},
  year = {2015},
  month = jul,
  series = {{{ITICSE-WGR}} '15},
  pages = {41--63},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2858796.2858798},
  abstract = {Educational data mining and learning analytics promise better understanding of student behavior and knowledge, as well as new information on the tacit factors that contribute to student actions. This knowledge can be used to inform decisions related to course and tool design and pedagogy, and to further engage students and guide those at risk of failure. This working group report provides an overview of the body of knowledge regarding the use of educational data mining and learning analytics focused on the teaching and learning of programming. In a literature survey on mining students' programming processes for 2005-2015, we observe a significant increase in work related to the field. However, the majority of the studies focus on simplistic metric analysis and are conducted within a single institution and a single course. This indicates the existence of further avenues of research and a critical need for validation and replication to better understand the various contributing factors and the reasons why certain results occur. We introduce a novel taxonomy to analyse replicating studies and discuss the importance of replicating and reproducing previous work. We describe what is the state of the art in collecting and sharing programming data. To better understand the challenges involved in replicating or reproducing existing studies, we report our experiences from three case studies using programming data. Finally, we present a discussion of future directions for the education and research community.},
  isbn = {978-1-4503-4146-2},
  keywords = {educational data mining,learning analytics,literature review,programming,replication},
  file = {/Users/bedmison/Zotero/storage/ZCBXTBYU/Ihantola et al. - 2015 - Educational Data Mining and Learning Analytics in .pdf}
}

@inproceedings{ihantola_how_2013,
  title = {How to Study Programming on Mobile Touch Devices: Interactive {{Python}} Code Exercises},
  shorttitle = {How to Study Programming on Mobile Touch Devices},
  booktitle = {Proceedings of the 13th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Ihantola, Petri and Helminen, Juha and Karavirta, Ville},
  year = {2013},
  month = nov,
  series = {Koli {{Calling}} '13},
  pages = {51--58},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2526968.2526974},
  abstract = {Scaffolded learning tasks where programs are constructed from predefined code fragments by dragging and dropping them (i.e. Parsons problems) are well suited to mobile touch devices, but quite limited in their applicability. They do not adequately cater for different approaches to constructing a program. After studying solutions to automatically assessed programming exercises, we found out that many different solutions are composed of a relatively small set of mutually similar code lines. Thus, they can be constructed by using the drag-and-drop approach if only it was possible to edit some small parts of the predefined fragments. Based on this, we have designed and implemented a new exercise type for mobile devices that builds on Parsons problems and falls somewhere between their strict scaffolding and full-blown coding exercises. In these exercises, we can gradually fade the scaffolding and allow programs to be constructed more freely so as not to restrict thinking and limit creativity too much while still making sure we are able to deploy them to small-screen mobile devices. In addition to the new concept and the related implementation, we discuss other possibilities of how programming could be practiced on mobile devices.},
  isbn = {978-1-4503-2482-3},
  keywords = {learning,mLearning,mobile learning,mobile touch devices,parsons problem,parsons puzzle,programming,Python,teaching},
  file = {/Users/bedmison/Zotero/storage/NDX3NN4J/Ihantola et al. - 2013 - How to study programming on mobile touch devices .pdf}
}

@inproceedings{ihantola_review_2010,
  title = {Review of Recent Systems for Automatic Assessment of Programming Assignments},
  booktitle = {Proceedings of the 10th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Ihantola, Petri and Ahoniemi, Tuukka and Karavirta, Ville and Sepp{\"a}l{\"a}, Otto},
  year = {2010},
  month = oct,
  series = {Koli {{Calling}} '10},
  pages = {86--93},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1930464.1930480},
  abstract = {This paper presents a systematic literature review of the recent (2006--2010) development of automatic assessment tools for programming exercises. We discuss the major features that the tools support and the different approaches they are using both from the pedagogical and the technical point of view. Examples of these features are ways for the teacher to define tests, resubmission policies, security issues, and so forth. We have also identified a list of novel features, like assessing web software, that are likely to get more research attention in the future. As a conclusion, we state that too many new systems are developed, but also acknowledge the current reasons for the phenomenon. As one solution we encourage opening up the existing systems and joining efforts on developing those further. Selected systems from our survey are briefly described in Appendix A.},
  isbn = {978-1-4503-0520-4},
  file = {/Users/bedmison/Zotero/storage/82MHIU9N/Ihantola et al. - 2010 - Review of recent systems for automatic assessment .pdf}
}

@article{ihantola_two-dimensional_2011,
  title = {Two-{{Dimensional Parson}}'s {{Puzzles}}: {{The Concept}}, {{Tools}}, and {{First Observations}}},
  shorttitle = {Two-{{Dimensional Parson}}'s {{Puzzles}}},
  author = {Ihantola, Petri and Karavirta, Ville},
  year = {2011},
  journal = {Journal of Information Technology Education: Innovations in Practice},
  volume = {10},
  pages = {119--132},
  issn = {2165-3151, 2165-316X},
  doi = {10.28945/1394},
  abstract = {Material published as part of this publication, either on-line or in print, is copyrighted by the Informing Science Institute. Permission to make digital or paper copy of part or all of these works for personal or classroom use is granted without fee provided that the copies are not made or distributed for profit or commercial advantage AND that copies 1) bear this notice in full and 2) give the full citation on the first page. It is permissible to abstract these works so long as credit is given. To copy in all other cases or to republish or to post on a server or to redistribute to lists requires specific permission and payment of a fee. Contact Publisher@InformingScience.org to request redistribution permission.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/SMMUMAY4/Ihantola and Karavirta - 2011 - Two-Dimensional Parson‚Äôs Puzzles The Concept, Too.pdf}
}

@inproceedings{jeuring_ask-elle_2012,
  title = {Ask-{{Elle}}: {{A Haskell Tutor}}},
  shorttitle = {Ask-{{Elle}}},
  booktitle = {21st {{Century Learning}} for 21st {{Century Skills}}},
  author = {Jeuring, Johan and Gerdes, Alex and Heeren, Bastiaan},
  editor = {Ravenscroft, Andrew and Lindstaedt, Stefanie and Kloos, Carlos Delgado and {Hern{\'a}ndez-Leo}, Davinia},
  year = {2012},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {453--458},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-33263-0_42},
  abstract = {In this demonstration we will introduce Ask-Elle, a Haskell tutor. Ask-Elle supports the incremental development of Haskell programs. It can give hints on how to proceed with solving a programming exercise, and feedback on incomplete student programs. We will show Ask-Elle in action, and discuss how a teacher can configure its behaviour.},
  isbn = {978-3-642-33263-0},
  langid = {english},
  keywords = {Feedback Message,Functional Programming,Intelligent Tutoring System,Model Solution,Tutoring System},
  file = {/Users/bedmison/Zotero/storage/DTUYQ8KK/Jeuring et al. - 2012 - Ask-Elle A Haskell Tutor.pdf}
}

@article{joy_boss_2005,
  title = {The Boss Online Submission and Assessment System},
  author = {Joy, Mike and Griffiths, Nathan and Boyatt, Russell},
  year = {2005},
  month = sep,
  journal = {Journal on Educational Resources in Computing},
  volume = {5},
  number = {3},
  pages = {2--es},
  issn = {1531-4278},
  doi = {10.1145/1163405.1163407},
  abstract = {Computer programming lends itself to automated assessment. With appropriate software tools, program correctness can be measured, along with an indication of quality according to a set of metrics. Furthermore, the regularity of program code allows plagiarism detection to be an integral part of the tools that support assessment. In this paper, we describe a submission and assessment system, called BOSS, that supports coursework assessment through collecting submissions, performing automatic tests for correctness and quality, checking for plagiarism, and providing an interface for marking and delivering feedback. We describe how automated assessment is incorporated into BOSS such that it supports, rather than constrains, assessment. The pedagogic and administrative issues that are affected by the assessment process are also discussed.},
  keywords = {automated assessment,Online submission,programming languages},
  file = {/Users/bedmison/Zotero/storage/NLW9UJ3J/Joy et al. - 2005 - The boss online submission and assessment system.pdf}
}

@inproceedings{kafura_design_2015,
  title = {Design and {{Preliminary Results From}} a {{Computational Thinking Course}}},
  booktitle = {Proceedings of the 2015 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Kafura, Dennis and Bart, Austin Cory and Chowdhury, Bushra},
  year = {2015},
  month = jun,
  series = {{{ITiCSE}} '15},
  pages = {63--68},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2729094.2742593},
  abstract = {This paper describes the design and initial assessment of a general education course in computational thinking for non-computer science majors. The key elements of the course include multidisciplinary cohorts to achieve learning across contexts, multiple languages/tools, including block-based and textual programming languages, repeated exposure to the underlying computational ideas in different forms, and student-defined projects using real world ("big") data to heighten motivation through self-directed contextualized learning. The preliminary multi-methods assessment shows that the course engendered high levels of motivation, achieved key objectives for learning in and across contexts, largely affirmed the choice of languages/tools, and supported, though less strongly than anticipated, the motivational effects of real-world data},
  isbn = {978-1-4503-3440-2},
  keywords = {big data,computational thinking,interdisciplinary cohorts,student engagement},
  file = {/Users/bedmison/Zotero/storage/IRB5APSC/Kafura et al. - 2015 - Design and Preliminary Results From a Computationa.pdf}
}

@inproceedings{karavirta_matrixpro_2004,
  title = {{{MatrixPro}} - a Tool for Demonstrating Data Structures and Algorithms Ex Tempore},
  booktitle = {{{IEEE International Conference}} on {{Advanced Learning Technologies}}, 2004. {{Proceedings}}.},
  author = {Karavirta, V. and Korhonen, A. and Malmi, L. and Stalnacke, K.},
  year = {2004},
  month = aug,
  pages = {892--893},
  doi = {10.1109/ICALT.2004.1357707},
  abstract = {Algorithm animation has been researched since early 1980's and many different visualization systems have been developed. However, most of them have remained as research prototypes and almost none have gained wide acceptance by teachers as classroom demonstration tools. One of the key reasons for this has been that preparing animations has been too laborious. In this paper, we demonstrate a new tool, MatrixPro, in which animations are generated in terms of visual algorithm simulation. The user can graphically invoke ready-made operations available in the library to simulate the working of real algorithms. Since the system understands the semantics of the operations, the teacher can ex tempore demonstrate the execution of algorithms with different input sets, or work with "what-if" questions students ask in lectures. Such an approach lowers considerably the step for adopting algorithm visualization as a regular lecture tool.},
  keywords = {Animation,Computer science,Data structures,Data visualization,Design engineering,Education,Graphical user interfaces,History,Libraries,Prototypes},
  file = {/Users/bedmison/Zotero/storage/A5VSBP3I/Karavirta et al. - 2004 - MatrixPro - a tool for demonstrating data structur.pdf;/Users/bedmison/Zotero/storage/7HPRPHM7/1357707.html}
}

@inproceedings{kay_personis_2002-1,
  title = {Personis: {{A Server}} for {{User Models}}},
  shorttitle = {Personis},
  booktitle = {Adaptive {{Hypermedia}} and {{Adaptive Web-Based Systems}}},
  author = {Kay, Judy and Kummerfeld, Bob and Lauder, Piers},
  editor = {De Bra, Paul and Brusilovsky, Peter and Conejo, Ricardo},
  year = {2002},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {203--212},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-47952-X_22},
  abstract = {A core element of an adaptive hypertext systems is the user model. This paper describes Personis, a user model server. We describe the architecture, design and implementation. We also describe the way that it is intended to operate in conjunction with the rest of an adaptive hypertext system.A distinctive aspect of the Personis user model server follows from our concern for making adaptive systems scrutable: these enable users to see the details of the information held about them, the processes used to gather it and the way that it is used to personalise an adaptive hypertext. We describe how the architecture supports this.The paper describes our evaluations of the current server. These indicate that the approach and implementation provide a workable server for small to medium sized user collections of information needed to adapt the hypertext.},
  isbn = {978-3-540-47952-9},
  langid = {english},
  keywords = {Personalisation,Security and Privacy of User Models,Server for user profile/model,User Control,User Modelling},
  file = {/Users/bedmison/Zotero/storage/IXQN5ZXQ/Kay et al. - 2002 - Personis A Server for User Models.pdf}
}

@article{kelleher_lowering_2005,
  title = {Lowering the Barriers to Programming: {{A}} Taxonomy of Programming Environments and Languages for Novice Programmers},
  shorttitle = {Lowering the Barriers to Programming},
  author = {Kelleher, Caitlin and Pausch, Randy},
  year = {2005},
  month = jun,
  journal = {ACM Computing Surveys},
  volume = {37},
  number = {2},
  pages = {83--137},
  issn = {0360-0300},
  doi = {10.1145/1089733.1089734},
  abstract = {Since the early 1960's, researchers have built a number of programming languages and environments with the intention of making programming accessible to a larger number of people. This article presents a taxonomy of languages and environments designed to make programming more accessible to novice programmers of all ages. The systems are organized by their primary goal, either to teach programming or to use programming to empower their users, and then, by each system's authors' approach, to making learning to program easier for novice programmers. The article explains all categories in the taxonomy, provides a brief description of the systems in each category, and suggests some avenues for future work in novice programming environments and languages.},
  keywords = {computer Science education,Human-computer interaction,learning,literacy,problem solving},
  file = {/Users/bedmison/Zotero/storage/4KCAZKGR/Kelleher and Pausch - 2005 - Lowering the barriers to programming A taxonomy o.pdf}
}

@incollection{koedinger_data_2010,
  title = {A Data Repository for the {{EDM}} Community: {{The PSLC DataShop}}},
  author = {Koedinger, Kenneth R and Baker, Ryan S.J.d. and Cunningham, Kyle and Skogsholm, Alida and Leber, Brett and Stamper, John},
  year = {2010},
  edition = {Handbook of educational data mining},
  volume = {43},
  pages = {43--56},
  publisher = {{CRC Press}},
  address = {{Boca Raton, FL}}
}

@inproceedings{korhonen_requirements_2013,
  title = {Requirements and Design Strategies for Open Source Interactive Computer Science {{eBooks}}},
  booktitle = {Proceedings of the {{ITiCSE}} Working Group Reports Conference on {{Innovation}} and Technology in Computer Science Education-Working Group Reports},
  author = {Korhonen, Ari and Naps, Thomas and Boisvert, Charles and Crescenzi, Pilu and Karavirta, Ville and Mannila, Linda and Miller, Bradley and Morrison, Briana and Rodger, Susan H. and Ross, Rocky and Shaffer, Clifford A.},
  year = {2013},
  month = jun,
  series = {{{ITiCSE}} -{{WGR}} '13},
  pages = {53--72},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2543882.2543886},
  abstract = {Online education supported by digital courseware will radically alter higher education in ways that we cannot predict. New technologies such as MOOCs and Khan Academy have generated interest in new models for knowledge delivery. The nature of Computer Science content provides special opportunities for computer-supported delivery in both traditional and online classes. Traditional CS textbooks are likely to be replaced by online materials that tightly integrate content with visualizations and automatically assessed exercises. We refer to these new textbook-like artifacts as icseBooks (pronounced \textbackslash ice books"), for interactive computer science electronic books. IcseBook technology will in turn impact the pedagogy used in CS courses. This report surveys the state of the field, addresses new use cases for CS pedagogy with icseBooks, and lays out a series of research questions for future study.},
  isbn = {978-1-4503-2665-0},
  keywords = {algorithm visualization,automated assessment,digital education,hypertext,interactive eBook},
  file = {/Users/bedmison/Zotero/storage/VZ83S45X/Korhonen et al. - 2013 - Requirements and design strategies for open source.pdf}
}

@inproceedings{kumar_model_2014,
  title = {A {{Model}} for {{Deploying Software Tutors}}},
  booktitle = {2014 {{IEEE Sixth International Conference}} on {{Technology}} for {{Education}}},
  author = {Kumar, Amruth N.},
  year = {2014},
  month = dec,
  pages = {3--9},
  doi = {10.1109/T4E.2014.27},
  abstract = {We propose a model for deployment of software tutors. In the model, the first stage of the pre-test-practice post-test evaluation protocol is used to initialize the student model needed for adaptation. In order to keep assessment congruent with learning, the same type of activity is used in all three stages of evaluation, and the software tutor itself is used to administer all three stages of the protocol. In order to minimize time while maximizing learning, post-test is set to adapt to practice, and students are also provided feedback after pre-test activities on which they provide incorrect response. Finally, the software tutor is set up to administer the pre-test-practice-post-test protocol as one seamless integrated session with no discernible breaks between the stages. This model of deployment helps the developer evaluate the effectiveness of the software tutor, helps the student minimize time while maximizing learning and enables the instructor to obtain concept-level summary of what worked and what needs to be reviewed again in the classroom. The deployment model has been implemented in software tutors for programming, called problets (problets.org). We produce quantitative data from three problets used in spring 2013 to illustrate the benefits of the deployment model that accrue to developers, students and instructors.},
  keywords = {Adaptation,Adaptation models,Computational modeling,Debugging,Deployment,Evaluation,Programming,Protocols,Software,Software tutors,Springs},
  file = {/Users/bedmison/Zotero/storage/A655P76L/Kumar - 2014 - A Model for Deploying Software Tutors.pdf;/Users/bedmison/Zotero/storage/WEF6MYG9/7009526.html}
}

@inproceedings{kumar_scalable_2006,
  title = {A {{Scalable Solution}} for {{Adaptive Problem Sequencing}} and {{Its Evaluation}}},
  booktitle = {Adaptive {{Hypermedia}} and {{Adaptive Web-Based Systems}}},
  author = {Kumar, Amruth},
  editor = {Wade, Vincent P. and Ashman, Helen and Smyth, Barry},
  year = {2006},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {161--171},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/11768012_18},
  abstract = {We propose an associative mechanism for adaptive generation of problems in intelligent tutors. Our evaluations of the tutors that use associative adaptation for problem sequencing show that 1) associative adaptation targets concepts less well understood by students; and 2) associative adaptation helps students learn with fewer practice problems. Apart from being domain-independent, the advantages of associative adaptation compared to other adaptive techniques are that it is easier to build and is scalable.},
  isbn = {978-3-540-34697-5},
  langid = {english},
  keywords = {Adaptive Problem Sequencing,Evaluation,Programming tutor},
  file = {/Users/bedmison/Zotero/storage/PNIUXPZH/Kumar - 2006 - A Scalable Solution for Adaptive Problem Sequencin.pdf}
}

@inproceedings{kurhila_educo_2002,
  title = {Educo - {{A Collaborative Learning Environment Based}} on {{Social Navigation}}},
  booktitle = {Adaptive {{Hypermedia}} and {{Adaptive Web-Based Systems}}},
  author = {Kurhila, Jaakko and Miettinen, Miikka and Nokelainen, Petri and Tirri, Henry},
  editor = {De Bra, Paul and Brusilovsky, Peter and Conejo, Ricardo},
  year = {2002},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {242--252},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-47952-X_26},
  abstract = {Web-based learning is primarily a lonesome activity, even when it involves working in groups. This is due to the fact that the majority of web-based learning relies on asynchronous forms of interacting with other people. In most of the cases, the chat discussion is the only form of synchronous interaction that adds to the feeling that there are other people present in the environment. Educo is a system that tries to bring in the sense of other users in a collaborative learning environment by making the other users and their the navigation visible to everyone else in the environment in real-time. The paper describes Educo and presents the first empirical evaluation as Educo was used in a university course.},
  isbn = {978-3-540-47952-9},
  langid = {english},
  keywords = {Document Cluster,Goal Orientation,Motivational Group,Recommender System,Test Anxiety},
  file = {/Users/bedmison/Zotero/storage/Q476EBY6/Kurhila et al. - 2002 - Educo - A Collaborative Learning Environment Based.pdf}
}

@article{kurhila_purposeful_2015,
  title = {A {{Purposeful MOOC}} to {{Alleviate Insufficient CS Education}} in {{Finnish Schools}}},
  author = {Kurhila, Jaakko and Vihavainen, Arto},
  year = {2015},
  month = apr,
  journal = {ACM Transactions on Computing Education},
  volume = {15},
  number = {2},
  pages = {10:1--10:18},
  doi = {10.1145/2716314},
  abstract = {The Finnish national school curriculum, effective from 2004, does not include any topics related to Computer Science (CS). To alleviate the problem that school students are not able to study CS-related topics, the Department of Computer Science at the University of Helsinki prepared a completely online course that is open to pupils and students in all schools in Finland. The course is a Massive Open Online Course (MOOC), as the attendance scales without an upper bound. Schools in Finland have offered the MOOC as an elective CS course for their students and granted formal school credits for completing (parts of) it. Since our MOOC is exactly the same programming course as our university-level CS1 course, we are able to use the MOOC also as a long-lasting entrance exam to the CS BSc and MSc degrees. After two spring semesters of operation, we have observed that there are school students dispersed around Finland who are ready and willing to take on a challenging programming course online, and bridging the MOOC to a full study right makes a strong incentive to keep working on the programming assignments, even without traditional teaching.},
  keywords = {Entrance exam,high-performing students,open online course,programming education},
  file = {/Users/bedmison/Zotero/storage/QUE9CM23/Kurhila and Vihavainen - 2015 - A Purposeful MOOC to Alleviate Insufficient CS Edu.pdf}
}

@inproceedings{law_user_2017,
  title = {User {{Perceptions}} of {{Using}} an {{Open Learner Model Visualisation Tool}} for {{Facilitating Self-regulated Learning}}},
  booktitle = {Proceedings of the {{Nineteenth Australasian Computing Education Conference}}},
  author = {Law, Check-Yee and Grundy, John and Cain, Andrew and Vasa, Rajesh and Cummaudo, Alex},
  year = {2017},
  month = jan,
  series = {{{ACE}} '17},
  pages = {55--64},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3013499.3013502},
  abstract = {Ways to encourage self-regulated learning have become a hot topic in higher education. In this research study, we explored users' perceptions regarding the uptake and effective use of an open learner model visualisation prototype tool -- Doubtfire++, in facilitating student self-regulated learning supporting Task-oriented Portfolio teaching and learning. We investigated students' perceptions of setting appropriate goals, monitoring performance and reflecting on learning through the use of the visualisation tool to support students in becoming self-regulated learners. Data was collected from 134 users using an online survey questionnaire. Results show that Doubtfire++ positively impacted users' perceptions of setting appropriate goals, monitoring performance and reflecting on learning. User role, experience using Doubtfire++, frequency of using Doubtfire++ and different teaching units significantly impacted respondents' perceptions whereas gender and familiarity with information visualisation techniques had no impact on respondents' perceptions. The results indicate that the approach can facilitate student self-regulated learning, especially for those new to Task-oriented Portfolio teaching and learning of programming units.},
  isbn = {978-1-4503-4823-2},
  keywords = {constructive alignment,Education,information visualisation,open learner model,outcome-based learning,self-regulated learning},
  file = {/Users/bedmison/Zotero/storage/K2IH4G85/Law et al. - 2017 - User Perceptions of Using an Open Learner Model Vi.pdf}
}

@inproceedings{leinonen_preventing_2017,
  title = {Preventing {{Keystroke Based Identification}} in {{Open Data Sets}}},
  booktitle = {Proceedings of the {{Fourth}} (2017) {{ACM Conference}} on {{Learning}} @ {{Scale}}},
  author = {Leinonen, Juho and Ihantola, Petri and Hellas, Arto},
  year = {2017},
  month = apr,
  series = {L@{{S}} '17},
  pages = {101--109},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3051457.3051458},
  abstract = {Large-scale courses such as Massive Online Open Courses (MOOCs) can be a great data source for researchers. Ideally, the data gathered on such courses should be openly available to all researchers. Studies could be easily replicated and novel studies on existing data could be conducted. However, very fine-grained data such as source code snapshots can contain hidden identifiers. For example, distinct typing patterns that identify individuals can be extracted from such data. Hence, simply removing explicit identifiers such as names and student numbers is not sufficient to protect the privacy of the users who have supplied the data. At the same time, removing all keystroke information would decrease the value of the shared data significantly. In this work, we study how keystroke data from a programming context could be modified to prevent keystroke latency based identification whilst still retaining information that can be used to e.g. infer programming experience. We investigate the degree of anonymization required to render identification of students based on their typing patterns unreliable. Then, we study whether the modified keystroke data can still be used to infer the programming experience of the students as a case study of whether the anonymized typing patterns have retained at least some informative value. We show that it is possible to modify data so that keystroke latency based identification is no longer accurate, but the programming experience of the students can still be inferred, i.e. the data still has value to researchers. In a broader context, our results indicate that information and anonymity are not necessarily mutually exclusive.},
  isbn = {978-1-4503-4450-0},
  keywords = {data anonymization,data privacy,keystroke dynamics,programming experience inference,source code snapshots},
  file = {/Users/bedmison/Zotero/storage/XT47NN7U/Leinonen et al. - 2017 - Preventing Keystroke Based Identification in Open .pdf}
}

@article{liyanagunawardena_moocs_2013,
  title = {{{MOOCs}}: {{A Systematic Study}} of the {{Published Literature}} 2008-2012},
  shorttitle = {{{MOOCs}}},
  author = {Liyanagunawardena, Tharindu Rekha and Adams, Andrew Alexandar and Williams, Shirley Ann},
  year = {2013},
  journal = {International Review of Research in Open and Distributed Learning},
  volume = {14},
  number = {3},
  pages = {202--227},
  publisher = {{Athabasca University Press (AU Press)}},
  issn = {1492-3831},
  doi = {10.19173/irrodl.v14i3.1455},
  abstract = {Massive open online courses (MOOCs) are a recent addition to the range of online learning options. Since 2008, MOOCs have been run by a variety of public and elite universities, especially in North America. Many academics have taken interest in MOOCs recognising the potential to deliver education around the globe on an unprecedented scale; some of these academics are taking a research-oriented perspective and academic papers describing their research are starting to appear in the traditional media of peer reviewed publications. This paper presents a systematic review of the published MOOC literature (2008-2012): Forty-five peer reviewed papers are identified through journals, database searches, searching the Web, and chaining from known sources to form the base for this review. We believe this is the first effort to systematically review literature relating to MOOCs, a fairly recent but massively popular phenomenon with a global reach. The review categorises the literature into eight different areas of interest, introductory, concept, case studies, educational theory, technology, participant focussed, provider focussed, and other, while also providing quantitative analysis of publications according to publication type, year of publication, and contributors. Future research directions guided by gaps in the literature are explored.},
  langid = {english},
  keywords = {Connectivism,Massively Open Online Course,MOOC,Systematic Review},
  file = {/Users/bedmison/Zotero/storage/4KTIFMRP/Liyanagunawardena et al. - 2013 - MOOCs A Systematic Study of the Published Literat.pdf;/Users/bedmison/Zotero/storage/V2D7H2LX/abstract.html}
}

@inproceedings{loboda_mastery_2014,
  title = {Mastery {{Grids}}: {{An Open Source Social Educational Progress Visualization}}},
  shorttitle = {Mastery {{Grids}}},
  booktitle = {Open {{Learning}} and {{Teaching}} in {{Educational Communities}}},
  author = {Loboda, Tomasz D. and Guerra, Julio and Hosseini, Roya and Brusilovsky, Peter},
  editor = {Rensing, Christoph and {de Freitas}, Sara and Ley, Tobias and {Mu{\~n}oz-Merino}, Pedro J.},
  year = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {235--248},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-11200-8_18},
  abstract = {While many pieces of educational software used in the classroom have been found to positively affect learning, they often are underused by students. Open learning model and social visualization are two approaches which have been helpful in ameliorating that low usage problem. This article introduces a fusion of these two ideas in a form of social progress visualization. A classroom evaluation indicates that this combination may be effective in engaging students, guiding them to suitable content, and enabling faster content access.},
  isbn = {978-3-319-11200-8},
  langid = {english},
  keywords = {Activity Grid,Content Access,Current Group,Educational Action,Main Grid},
  file = {/Users/bedmison/Zotero/storage/AFF6VQXE/Loboda et al. - 2014 - Mastery Grids An Open Source Social Educational P.pdf}
}

@article{miller_evolution_1994,
  title = {Evolution of {{Novice Programming Environments}}: {{The Structure Editors}} of {{Carnegie Mellon University}}},
  shorttitle = {Evolution of {{Novice Programming Environments}}},
  author = {Miller, Philip and Pane, John and Meter, Glenn and Vorthmann, Scott},
  year = {1994},
  month = jan,
  journal = {Interactive Learning Environments},
  volume = {4},
  number = {2},
  pages = {140--158},
  publisher = {{Routledge}},
  issn = {1049-4820},
  doi = {10.1080/1049482940040202},
  abstract = {Beginning in the early 1980s, the Computer Science Department at Carnegie Mellon University developed and used three generations of novice programming environments. The focus of these systems was to apply, advance and tune structure editor technology in support of the teaching and learning of computer programming. The use of these pedagogical systems in Carnegie Mellon's introductory programming courses provided feedback and inspiration to guide the projects. This paper tracks the evolution of the programming environments and courses, documenting important lessons and discoveries about novice programmers and the environments that support them.},
  annotation = {\_eprint: https://doi.org/10.1080/1049482940040202},
  file = {/Users/bedmison/Zotero/storage/4WLS87GC/Miller et al. - 1994 - Evolution of Novice Programming Environments The .pdf;/Users/bedmison/Zotero/storage/K3UQBDQZ/1049482940040202.html}
}

@article{naps_jhaveenvironment_2000,
  title = {{{JHAV\'E}}\textemdash an Environment to Actively Engage Students in {{Web-based}} Algorithm Visualizations},
  author = {Naps, Thomas L. and Eagan, James R. and Norton, Laura L.},
  year = {2000},
  month = mar,
  journal = {ACM SIGCSE Bulletin},
  volume = {32},
  number = {1},
  pages = {109--113},
  issn = {0097-8418},
  doi = {10.1145/331795.331829},
  abstract = {In this paper, we describe JHAV\'E (Java-hosted Algorithm Visualization Environment), a client-server environment for delivering algorithm visualizations over the Web. The first section of the paper briefly summarizes prior research by a variety of investigators into the pedagogical effectiveness of algorithm visualization (AV). The design goals of JHAV\'E are then placed in the context of this research. After a discussion of some technical details of the JHAV\'E architecture, we present two examples of algorithms depicted in JHAV\'E. The results of students' exploring these algorithms with JHAV\'E are analyzed. We close with a discussion of the general conclusions reached from our current work and future directions in which it may lead.},
  file = {/Users/bedmison/Zotero/storage/ZZQXBYVZ/Naps et al. - 2000 - JHAV&#xc9\;&#x2014\;an environment to actively engag.pdf}
}

@inproceedings{offutt_novel_2017,
  title = {A {{Novel Self-Paced Model}} for {{Teaching Programming}}},
  booktitle = {Proceedings of the {{Fourth}} (2017) {{ACM Conference}} on {{Learning}} @ {{Scale}}},
  author = {Offutt, Jeff and Ammann, Paul and Dobolyi, Kinga and Kauffmann, Chris and Lester, Jaime and Praphamontripong, Upsorn and Rangwala, Huzefa and Setia, Sanjeev and Wang, Pearl and White, Liz},
  year = {2017},
  month = apr,
  series = {L@{{S}} '17},
  pages = {177--180},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3051457.3053978},
  abstract = {The Self-Paced Learning Increases Retention and Capacity (SPARC) project is responding to the well-documented surge in CS enrollment by creating a self-paced learning environment that blends online learning, automated assessment, collaborative practice, and peer-supported learning. SPARC delivers educational material online, encourages students to practice programming in groups, frees them to learn material at their own pace, and allows them to demonstrate proficiency at any time. This model contrasts with traditional course offerings, which impose a single schedule of due dates and exams for all students. SPARC allows students to complete courses faster or slower at a pace tailored to the individual, thereby allowing universities to teach more students with the same or fewer resources. This paper describes the goals and elements of the SPARC model as applied to CS1. We present results so far and discuss the future of the project.},
  isbn = {978-1-4503-4450-0},
  keywords = {active learning,collaboration,gender and diversity,online learning,peer learning,scaling cs1,self-pacing},
  file = {/Users/bedmison/Zotero/storage/97RWKY7E/Offutt et al. - 2017 - A Novel Self-Paced Model for Teaching Programming.pdf}
}

@inproceedings{papancea_open_2013,
  title = {An Open Platform for Managing Short Programming Exercises},
  booktitle = {Proceedings of the Ninth Annual International {{ACM}} Conference on {{International}} Computing Education Research},
  author = {Papancea, Andrei and Spacco, Jaime and Hovemeyer, David},
  year = {2013},
  month = aug,
  series = {{{ICER}} '13},
  pages = {47--52},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2493394.2493401},
  abstract = {In this paper, we describe CloudCoder, an open platform for creating, assigning, and sharing short programming exercises for a variety of languages (currently C/C++, Java, Python and Ruby). Like other similar systems, CloudCoder is web-based, letting students write code directly in a web browser, click the "submit" button, and receive immediate feedback. Unlike other systems, which tend to be closed, or commercial, or both, CloudCoder is a completely open platform. The code for the system is open-source, and exercises written for CloudCoder may be shared to a central repository under permissive licenses such as Creative Commons BY-SA. Finally, CloudCoder collects detailed data that faculty can use for educational research. We also report on successful pilot studies of CloudCoder at several institutions, and outline research questions we hope to address in future work.},
  isbn = {978-1-4503-2243-0},
  keywords = {cs1,data collection,novice programmers,student behavior},
  file = {/Users/bedmison/Zotero/storage/TWM5RBZU/Papancea et al. - 2013 - An open platform for managing short programming ex.pdf}
}

@book{polson_foundations_1988,
  title = {Foundations of {{Intelligent Tutoring Systems}}},
  editor = {Polson, Martha C. and Richardson, J. Jeffrey},
  year = {1988},
  month = jan,
  publisher = {{Psychology Press}},
  address = {{New York}},
  doi = {10.4324/9780203761557},
  abstract = {This collection of essays -- each of which treats an integral aspect of the field -- defines several key concepts and their interrelationships, outlines basic research issues, and discusses near-term applications projects. The book examines three foundations of ITSs in detail -- expert, student diagnostic, and instructional or curricular knowledge -- and describes:   * How they are embodied in computer-assisted instructional environments  * How these systems accrue the advantages of advanced computer interface technologies  * How ITSs will emerge in the real world of complex problem solving  * How researchers must learn to evaluate the effectiveness and overall quality of these dynamic systems in a world where machine tutoring may one day be taken for granted. Justine Wise Polier (1903-1987) was educated at Bryn Mawr, Radcliffe, and Barnard. She earned her law degree from Yale Law School where she was editor of the Yale Law Journal.   In 1935, she was appointed Justice of the Family Court where she sat for 38 years. Judge Polier took a leave from the bench in 1941 when she was appointed special advisor to Eleanor Roosevelt at the Office of Civilian Defense in Washington. She also served as Chairman of the Committee on Mental Health for New York.   Judge Polier was a founder and president of the Wiltwyck School; vice president of the Citizens Committee for Children of N.Y.; vice president of the American Jewish Congress; Delegate to the White House Conferences on Children and on Education. Judge Polier was a member of the Institute of Judicial Administration, American Bar Association. She was on the editorial board of the International Juridical Association and was awarded the 1964 Isaac Ray Award by the American Psychiatric Association for "contributions to the improvement of the relations of Law and Psychiatry." Following her retirement from the bench, she served as the director of the Juvenile Judge division of the Children's Defense Fund.  During her illustrious career, Judge Polier was the recipient of numerous awards including: the Citation for Distinguished Service to the City of New York, 1973; the Human Services Award from the New York and Bronx Mental Health Association, 1973; the Eleanor Roosevelt Humanitarian Award from the Board of Directors of Wiltwyck School, 1975.   Judge Polier also published numerous reports and several books including: Everyone's Children, Nobody's Child; Back to What Woodshed?; A View from the Bench; and The Rule of Law and the Role of Psychiatry.},
  isbn = {978-0-203-76155-7}
}

@article{price_principled_1993,
  title = {A {{Principled Taxonomy}} of {{Software Visualization}}},
  author = {Price, Blaine A. and Baecker, Ronald M. and Small, Ian S.},
  year = {1993},
  month = sep,
  journal = {Journal of Visual Languages \& Computing},
  volume = {4},
  number = {3},
  pages = {211--266},
  issn = {1045-926X},
  doi = {10.1006/jvlc.1993.1015},
  abstract = {In the early 1980s researchers began building systems to visualize computer programs and algorithms using newly emerging graphical workstation technology. After more than a decade of advances in interface technology, a large variety of systems has been built and many different aspects of the visualization process have been investigated. As in any new branch of a science, a taxonomy is required so that researchers can use a common language to discuss the merits of existing systems, classify new ones (to see if they really are new) and identify gaps which suggest promising areas for further development. Several authors have suggested taxonomies for these visualization systems, but they have been ad hoc and have relied on only a handful of characteristics to describe a large and diverse area of work. Another major drawback of these taxonomies is their inability to accommodate expansion: there is no clear way to add new categories when the need arises. In this paper we present a detailed taxonomy of systems for the visualization of computer software. This taxonomy was derived from an established black-box model of software and is composed of a hierarchy with six broad categories at the top and over 30 leaf-level nodes at four hierarchical levels. We describe 12 important systems in detail and apply the taxonomy to them in order to illustrate its features. After discussing each system in this context, we analyse its coverage of the categories and present a research agenda for future work in the area.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/X862L54M/S1045926X83710153.html}
}

@inproceedings{procopiuc_visualization_1996,
  title = {Visualization and Interaction in the Computer Science Formal Languages Course with {{JFLAP}}},
  booktitle = {Technology-{{Based Re-Engineering Engineering Education Proceedings}} of {{Frontiers}} in {{Education FIE}}'96 26th {{Annual Conference}}},
  author = {Procopiuc, M. and Procopiuc, O. and Rodger, S.H.},
  year = {1996},
  month = nov,
  volume = {1},
  pages = {121-125 vol.1},
  issn = {0190-5848},
  doi = {10.1109/FIE.1996.569925},
  abstract = {The computer science formal languages course becomes a more traditional computer science course by integrating visual and interactive tools into the course, allowing students to gain hands-on experience with theoretical concepts. We explain how the tool JFLAP can be used in such a manner.},
  keywords = {Algorithm design and analysis,Animation,Automata,Computer science,Doped fiber amplifiers,Formal languages,Mathematics,Personal digital assistants,Programming profession,Visualization},
  file = {/Users/bedmison/Zotero/storage/7TPA58FE/Procopiuc et al. - 1996 - Visualization and interaction in the computer scie.pdf;/Users/bedmison/Zotero/storage/H35T9F33/569925.html}
}

@inproceedings{rajala_ville_2007,
  title = {{{VILLE}} \textendash{} {{A Language-Independent Program Visualization Tool}}},
  booktitle = {Proceedings of the {{Seventh Baltic Sea Conference}} on {{Computing Education Research}}},
  author = {Rajala, Teemu and Laakso, Mikko-Jussi and Kaila, Erkki and Salakoski, Tapio},
  year = {2007},
  volume = {88},
  pages = {151--159}
}

@inproceedings{risco_evaluation_2012,
  title = {Evaluation of an Intelligent Tutoring System Used for Teaching {{RAD}} in a Database Environment},
  booktitle = {Proceedings of the {{Fourteenth Australasian Computing Education Conference}} - {{Volume}} 123},
  author = {Risco, Silviu and Reye, Jim},
  year = {2012},
  month = jan,
  series = {{{ACE}} '12},
  pages = {131--140},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{AUS}},
  abstract = {This paper presents an evaluation of the Personal Access Tutor (PAT), an Intelligent Tutoring System (ITS) for Learning Rapid Application Development (RAD) in a database environment. We first give an overview of Microsoft Access, the environment that PAT uses. After describing related work in the field, we discuss the architecture of PAT and the services that PAT offers to the students, together with a short introduction of how students use PAT. After presenting the evaluation methodology, the results of a summative evaluation are discussed. Additional evaluation using data gathered from students by PAT is analysed as a pre-post test. The paper concludes with a summary and describes further work.},
  isbn = {978-1-921770-04-3},
  keywords = {intelligent tutoring systems,ITS evaluation,student modelling},
  file = {/Users/bedmison/Zotero/storage/U6G98RA7/Risco and Reye - 2012 - Evaluation of an intelligent tutoring system used .pdf}
}

@article{rivers_data-driven_2017,
  title = {Data-{{Driven Hint Generation}} in {{Vast Solution Spaces}}: A {{Self-Improving Python Programming Tutor}}},
  shorttitle = {Data-{{Driven Hint Generation}} in {{Vast Solution Spaces}}},
  author = {Rivers, Kelly and Koedinger, Kenneth R.},
  year = {2017},
  month = mar,
  journal = {International Journal of Artificial Intelligence in Education},
  volume = {27},
  number = {1},
  pages = {37--64},
  issn = {1560-4306},
  doi = {10.1007/s40593-015-0070-z},
  abstract = {To provide personalized help to students who are working on code-writing problems, we introduce a data-driven tutoring system, ITAP (Intelligent Teaching Assistant for Programming). ITAP uses state abstraction, path construction, and state reification to automatically generate personalized hints for students, even when given states that have not occurred in the data before. We provide a detailed description of the system's implementation and perform a technical evaluation on a small set of data to determine the effectiveness of the component algorithms and ITAP's potential for self-improvement. The results show that ITAP is capable of producing hints for almost any given state after being given only a single reference solution, and that it can improve its performance by collecting data over time.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/A3B36MXE/Rivers and Koedinger - 2017 - Data-Driven Hint Generation in Vast Solution Space.pdf}
}

@book{romero_handbook_2010,
  title = {Handbook of {{Educational Data Mining}}},
  author = {Romero, Cristobal and Ventura, Sebastian and Pechenizkiy, Mykola and d Baker, Ryan S. J.},
  year = {2010},
  month = oct,
  publisher = {{CRC Press}},
  abstract = {Handbook of Educational Data Mining (EDM) provides a thorough overview of the current state of knowledge in this area. The first part of the book includes nine surveys and tutorials on the principal data mining techniques that have been applied in education. The second part presents a set of 25 case studies that give a rich overview of the problems},
  googlebooks = {u5aWVw0uQJMC},
  isbn = {978-1-4398-0458-2},
  langid = {english},
  keywords = {Business \& Economics / Statistics,Computers / Data Science / Data Analytics,Computers / Programming / Games}
}

@inproceedings{rosling_adapting_2010,
  title = {Adapting Moodle to Better Support {{CS}} Education},
  booktitle = {Proceedings of the 2010 {{ITiCSE}} Working Group Reports},
  author = {R{\"o}{\ss}ling, Guido and McNally, Myles and Crescenzi, Pierluigi and Radenski, Atanas and Ihantola, Petri and {S{\'a}nchez-Torrubia}, M. Gloria},
  year = {2010},
  month = jun,
  series = {{{ITiCSE-WGR}} '10},
  pages = {15--27},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1971681.1971684},
  abstract = {Many commercial or open-source systems for organizing courses are available, offering access to course materials, communication support, and receiving and grading student submissions. However, most of these systems are by default not ideally prepared to address specific demands of Computer Science (CS) education. We explore how Moodle as one of the most popular and free systems can be better adapted to support the needs of CS education and provide concrete guidance on features and extensions that could be explored. This report and work based on it can significantly improve courses for educators and students alike},
  isbn = {978-1-4503-0677-5},
  keywords = {CALMS,computer science education,computing augmented learning management system,learning management system,LMS,Moodle},
  file = {/Users/bedmison/Zotero/storage/FCWIZUM7/R√∂√üling et al. - 2010 - Adapting moodle to better support CS education.pdf}
}

@article{rosling_animal_2000,
  title = {The {{ANIMAL}} Algorithm Animation Tool},
  author = {R{\"o}{\ss}ling, Guido and Sch{\"u}ler, Markus and Freisleben, Bernd},
  year = {2000},
  month = jul,
  journal = {ACM SIGCSE Bulletin},
  volume = {32},
  number = {3},
  pages = {37--40},
  issn = {0097-8418},
  doi = {10.1145/353519.343069},
  abstract = {In this paper, we present Animal, a new tool for developing animations to be used in lectures. Animal offers a small but powerful set of graphical operators. Animations are generated using a visual editor, by scripting or via API calls. All animations can be edited visually. Animal supports source and pseudo code inclusion and highlighting as well as precise user-defined delays between actions. The paper evaluates the functionality of Animal in comparison to other animation tools.},
  file = {/Users/bedmison/Zotero/storage/VQ2BWF9U/R√∂√üling et al. - 2000 - The ANIMAL algorithm animation tool.pdf}
}

@article{rosling_enhancing_2008,
  title = {Enhancing Learning Management Systems to Better Support Computer Science Education},
  author = {R{\"o}{\ss}ling, Guido and Joy, Mike and Moreno, Andr{\'e}s and Radenski, Atanas and Malmi, Lauri and Kerren, Andreas and Naps, Thomas and Ross, Rockford J. and Clancy, Michael and Korhonen, Ari and Oechsle, Rainer and Iturbide, J. {\'A}ngel Vel{\'a}zquez},
  year = {2008},
  month = nov,
  journal = {ACM SIGCSE Bulletin},
  volume = {40},
  number = {4},
  pages = {142--166},
  issn = {0097-8418},
  doi = {10.1145/1473195.1473239},
  abstract = {Many individual instructors -- and, in some cases, entire universities -- are gravitating towards the use of comprehensive learning management systems (LMSs), such as Blackboard and Moodle, for managing courses and enhancing student learning. As useful as LMSs are, they are short on features that meet certain needs specific to computer science education. On the other hand, computer science educators have developed--and continue to develop-computer-based software tools that aid in management, teaching, and/or learning in computer science courses. In this report we provide an overview of current CS specific on-line learning resources and guidance on how one might best go about extending an LMS to include such tools and resources. We refer to an LMS that is extended specifically for computer science education as a Computing Augmented Learning Management System, or CALMS. We also discuss sound pedagogical practices and some practical and technical principles for building a CALMS. However, we do not go into details of creating a plug-in for some specific LMS. Further, the report does not favor one LMS over another as the foundation for a CALMS.},
  keywords = {CALMS,computer science education,computing augmented learning management system,learning management system,LMS},
  file = {/Users/bedmison/Zotero/storage/XGTNVAZ5/R√∂√üling et al. - 2008 - Enhancing learning management systems to better su.pdf}
}

@incollection{schafer_collaborative_2007,
  title = {Collaborative {{Filtering Recommender Systems}}},
  booktitle = {The {{Adaptive Web}}: {{Methods}} and {{Strategies}} of {{Web Personalization}}},
  author = {Schafer, J. Ben and Frankowski, Dan and Herlocker, Jon and Sen, Shilad},
  editor = {Brusilovsky, Peter and Kobsa, Alfred and Nejdl, Wolfgang},
  year = {2007},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {291--324},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-72079-9_9},
  abstract = {One of the potent personalization technologies powering the adaptive web is collaborative filtering. Collaborative filtering (CF) is the process of filtering or evaluating items through the opinions of other people. CF technology brings together the opinions of large interconnected communities on the web, supporting filtering of substantial quantities of data. In this chapter we introduce the core concepts of collaborative filtering, its primary uses for users of the adaptive web, the theory and practice of CF algorithms, and design decisions regarding rating systems and acquisition of ratings. We also discuss how to evaluate CF systems, and the evolution of rich interaction interfaces. We close the chapter with discussions of the challenges of privacy particular to a CF recommendation service and important open research questions in the field.},
  isbn = {978-3-540-72079-9},
  langid = {english},
  keywords = {Association Rule Mining,Collaborative Filter,Explicit Rating,News Article,Recommender System},
  file = {/Users/bedmison/Zotero/storage/7LW3QBSQ/Schafer et al. - 2007 - Collaborative Filtering Recommender Systems.pdf}
}

@inproceedings{serrano_camara_evaluation_2012,
  title = {Evaluation of a Collaborative Instructional Framework for Programming Learning},
  booktitle = {Proceedings of the 17th {{ACM}} Annual Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Serrano C{\'a}mara, Luis Miguel and Paredes Velasco, Maximiliano and {Vel{\'a}zquez-Iturbide}, Jes{\'u}s {\'A}ngel},
  year = {2012},
  month = jul,
  series = {{{ITiCSE}} '12},
  pages = {162--167},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2325296.2325338},
  abstract = {Our work lies within the collaborative approach to learning CS1. We developed an instructional framework for collaborative learning (named CIF) that is oriented by educational objectives at the analysis level of Bloom's taxonomy. Moreover, the framework is supported by a platform (named MoCAS) of collaborative tools delivered with mobile devices. In this paper an experiment is presented to evaluate the educational effectiveness of CIF and MoCAS vs. three different learning approaches. We selected a topic representative of analysis tasks, namely scope of identifiers. The experiment was conducted with four groups, respectively using a classical lecture format, a collaborative approach, the CIF framework, and CIF plus the MoCAS tool. The experiment obtains statistically significant results, showing enhanced learning with the joint use of CIF and MoCAS.},
  isbn = {978-1-4503-1246-2},
  keywords = {bloom taxonomy,computer supported collaborative learning (cscl),cs1,evaluation,mobile devices},
  file = {/Users/bedmison/Zotero/storage/4YYV9I4E/Serrano C√°mara et al. - 2012 - Evaluation of a collaborative instructional framew.pdf}
}

@article{shaffer_algorithm_2007,
  title = {Algorithm Visualization: A Report on the State of the Field},
  shorttitle = {Algorithm Visualization},
  author = {Shaffer, Clifford A. and Cooper, Matthew and Edwards, Stephen H.},
  year = {2007},
  month = mar,
  journal = {ACM SIGCSE Bulletin},
  volume = {39},
  number = {1},
  pages = {150--154},
  issn = {0097-8418},
  doi = {10.1145/1227504.1227366},
  abstract = {We present our findings on the state of the field of algorithm visualization, based on extensive search and analysis of links to hundreds of visualizations. We seek to answer questions such as how content is distributed among topics, who created algorithm visualizations and when, the overall quality of available visualizations, and how visualizations are disseminated. We have built a wiki that currently catalogs over 350 algorithm visualizations, contains the beginnings of an annotated bibliography on algorithm visualization literature, and provides information about researchers and projects. Unfortunately, we found that most existing algorithm visualizations are of low quality, and the content coverage is skewed heavily toward easier topics. There are no effective repositories or organized collections of algorithm visualizations currently available. Thus, the field appears in need of improvement in dissemination of materials, informing potential developers about what is needed, and propagating known best practices for creating new visualizations.},
  keywords = {algorithm animation,courseware,data structure and algorithm visualizations},
  file = {/Users/bedmison/Zotero/storage/TIJQWAAI/Shaffer et al. - 2007 - Algorithm visualization a report on the state of .pdf}
}

@article{shaffer_algorithm_2010-1,
  title = {Algorithm {{Visualization}}: {{The State}} of the {{Field}}},
  shorttitle = {Algorithm {{Visualization}}},
  author = {Shaffer, Clifford A. and Cooper, Matthew L. and Alon, Alexander Joel D. and Akbar, Monika and Stewart, Michael and Ponce, Sean and Edwards, Stephen H.},
  year = {2010},
  month = aug,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {3},
  pages = {9:1--9:22},
  doi = {10.1145/1821996.1821997},
  abstract = {We present findings regarding the state of the field of Algorithm Visualization (AV) based on our analysis of a collection of over 500 AVs. We examine how AVs are distributed among topics, who created them and when, their overall quality, and how they are disseminated. There does exist a cadre of good AVs and active developers. Unfortunately, we found that many AVs are of low quality, and coverage is skewed toward a few easier topics. This can make it hard for instructors to locate what they need. There are no effective repositories of AVs currently available, which puts many AVs at risk for being lost to the community over time. Thus, the field appears in need of improvement in disseminating materials, propagating known best practices, and informing developers about topic coverage. These concerns could be mitigated by building community and improving communication among AV users and developers.},
  keywords = {Algorithm animation,algorithm visualization,AlgoViz Wiki,community,data structure visualization,free and open source software},
  file = {/Users/bedmison/Zotero/storage/VWKVCRYH/Shaffer et al. - 2010 - Algorithm Visualization The State of the Field.pdf}
}

@inproceedings{shaffer_building_2010,
  title = {Building an Online Educational Community for Algorithm Visualization},
  booktitle = {Proceedings of the 41st {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Shaffer, Clifford A. and Naps, Thomas L. and Rodger, Susan H. and Edwards, Stephen H.},
  year = {2010},
  month = mar,
  series = {{{SIGCSE}} '10},
  pages = {475--476},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1734263.1734421},
  isbn = {978-1-4503-0006-3},
  keywords = {algorithm visualization,online educational community},
  file = {/Users/bedmison/Zotero/storage/N8DZ2ZDT/Shaffer et al. - 2010 - Building an online educational community for algor.pdf}
}

@inproceedings{shaffer_getting_2011,
  title = {Getting Algorithm Visualizations into the Classroom},
  booktitle = {Proceedings of the 42nd {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Shaffer, Clifford A. and Akbar, Monika and Alon, Alexander Joel D. and Stewart, Michael and Edwards, Stephen H.},
  year = {2011},
  month = mar,
  series = {{{SIGCSE}} '11},
  pages = {129--134},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1953163.1953204},
  abstract = {Algorithm visualizations (AVs) are widely viewed as having the potential for improving computer science education. However, the rate of AV use and overall impact on education does not match the positive interest in their use that instructors report. Surveys of CS faculty show that impediments to successful use of AVs in the classroom include difficulties in finding quality AVs on desired topics, difficulties in adapting AVs to a given classroom setting, and lack of knowledge on the best way to deploy AVs. This indicates a need for better support for instructors, to get them past these barriers. We seek to provide this support through an online educational community that relies on a new model based less on the "digital library" approach of information gained by going to a site and searching. Instead, the focus is on community-added content through members' discussions, reviews, and ratings of content items. The AlgoViz community effort will better focus the future direction of AV development and use.},
  isbn = {978-1-4503-0500-6},
  keywords = {active learning,algorithm visualization,animation,data structure visualization,interactive tutorial,online educational community,teaching aid},
  file = {/Users/bedmison/Zotero/storage/22L46QV2/Shaffer et al. - 2011 - Getting algorithm visualizations into the classroo.pdf}
}

@inproceedings{shaffer_opendsa_2016,
  title = {{{OpenDSA}}: {{An Interactive eTextbook}} for {{Computer Science Courses}}},
  shorttitle = {{{OpenDSA}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}},
  author = {Shaffer, Clifford A.},
  year = {2016},
  month = feb,
  series = {{{SIGCSE}} '16},
  pages = {5},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2839509.2850505},
  abstract = {The open-source OpenDSA eTextbook system is seeing rapidly growing use around the world. It combines textbook-quality tutorial material with many algorithm visualizations (AVs), simulations, and a large collection of interactive exercises, including small programming exercises. Its materials are re-configurable for specific classes. Being implemented in HTML5, it requires only a web browser to be accessible to students. Available content now includes comprehensive coverage for Data Structures and Algorithms courses, and rapidly growing content for Programming Languages, Translators, and Formal Languages courses. This session will provide a demonstration of the most innovative features of OpenDSA as they might be used by students and instructors in a range of Computer Science courses.},
  isbn = {978-1-4503-3685-7},
  keywords = {algorithm visualization,algorithms,data structures,etextbooks,formal languages and automata,interactive content,programming languages},
  file = {/Users/bedmison/Zotero/storage/JESUGHWZ/Shaffer - 2016 - OpenDSA An Interactive eTextbook for Computer Sci.pdf}
}

@article{shneiderman_teaching_1977,
  title = {Teaching Programming: {{A}} Spiral Approach to Syntax and Semantics},
  shorttitle = {Teaching Programming},
  author = {Shneiderman, Ben},
  year = {1977},
  month = jan,
  journal = {Computers \& Education},
  volume = {1},
  number = {4},
  pages = {193--197},
  issn = {0360-1315},
  doi = {10.1016/0360-1315(77)90008-2},
  abstract = {Coupling the recently proposed syntactic/semantic model of programmer behavior [1] with classic educational psychological theories yields new insights to teaching programming to novices. These new insights should make programming education more natural to students. alleviate ``computer shock'' (the analog of ``math anxiety'' [2]) and promote the development of widespread ``computer literacy''. The spiral approach is the parallel acquisition of syntactic and semantic knowledge in a sequence which provokes student interest by using meaningful examples, builds on previous knowledge, is in harmony with the student's cognitive skills, provides reinforcement of recently acquired material and develops confidence through successful accomplishment of increasingly difficult tasks. The relationship of structured programming and flowcharts to the spiral approach is discussed.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/29BL8KLS/Shneiderman - 1977 - Teaching programming A spiral approach to syntax .pdf;/Users/bedmison/Zotero/storage/3EGHND8B/0360131577900082.html}
}

@article{singh_automated_2013,
  title = {Automated Feedback Generation for Introductory Programming Assignments},
  author = {Singh, Rishabh and Gulwani, Sumit and {Solar-Lezama}, Armando},
  year = {2013},
  month = jun,
  journal = {ACM SIGPLAN Notices},
  volume = {48},
  number = {6},
  pages = {15--26},
  issn = {0362-1340},
  doi = {10.1145/2499370.2462195},
  abstract = {We present a new method for automatically providing feedback for introductory programming problems. In order to use this method, we need a reference implementation of the assignment, and an error model consisting of potential corrections to errors that students might make. Using this information, the system automatically derives minimal corrections to student's incorrect solutions, providing them with a measure of exactly how incorrect a given solution was, as well as feedback about what they did wrong. We introduce a simple language for describing error models in terms of correction rules, and formally define a rule-directed translation strategy that reduces the problem of finding minimal corrections in an incorrect program to the problem of synthesizing a correct program from a sketch. We have evaluated our system on thousands of real student attempts obtained from the Introduction to Programming course at MIT (6.00) and MITx (6.00x). Our results show that relatively simple error models can correct on average 64\% of all incorrect submissions in our benchmark set.},
  keywords = {automated grading,computer-aided education,program synthesis},
  file = {/Users/bedmison/Zotero/storage/P7MI639J/Singh et al. - 2013 - Automated feedback generation for introductory pro.pdf}
}

@article{skrien_cpu_2001,
  title = {{{CPU Sim}} 3.1: {{A}} Tool for Simulating Computer Architectures for Computer Organization Classes},
  shorttitle = {{{CPU Sim}} 3.1},
  author = {Skrien, Dale},
  year = {2001},
  month = dec,
  journal = {Journal on Educational Resources in Computing},
  volume = {1},
  number = {4},
  pages = {46--59},
  issn = {1531-4278},
  doi = {10.1145/514144.514731},
  abstract = {CPU Sim 3.1 is an educational software package written in Java for use in CS3 courses. CPU Sim provides students an active learning environment in which they can design, modify, and compare various computer architectures at the register-transfer level and higher. They can run assembly language or machine language programs for those architectures through simulation. CPU Sim is a complete development environment, including dialog boxes for designing the CPU architecture, a text editor for editing assembly language programs, an assembler, several display windows for viewing the registers and RAMs during the execution of programs, and many debugging features such as the ability to step forward or backward during execution, inspecting and optionally changing the values in the registers and RAMs after each step. These features and suggested uses of CPU Sim in CS3 classes are discussed.},
  keywords = {Computer architecture simulator,education},
  file = {/Users/bedmison/Zotero/storage/AHVRM9L6/Skrien - 2001 - CPU Sim 3.1 A tool for simulating computer archit.pdf}
}

@article{sorva_review_2013,
  title = {A {{Review}} of {{Generic Program Visualization Systems}} for {{Introductory Programming Education}}},
  author = {Sorva, Juha and Karavirta, Ville and Malmi, Lauri},
  year = {2013},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {13},
  number = {4},
  pages = {15:1--15:64},
  doi = {10.1145/2490822},
  abstract = {This article is a survey of program visualization systems intended for teaching beginners about the runtime behavior of computer programs. Our focus is on generic systems that are capable of illustrating many kinds of programs and behaviors. We inclusively describe such systems from the last three decades and review findings from their empirical evaluations. A comparable review on the topic does not previously exist; ours is intended to serve as a reference for the creators, evaluators, and users of educational program visualization systems. Moreover, we revisit the issue of learner engagement which has been identified as a potentially key factor in the success of educational software visualization and summarize what little is known about engagement in the context of the generic program visualization systems for beginners that we have reviewed; a proposed refinement of the frameworks previously used by computing education researchers to rank types of learner engagement is a side product of this effort. Overall, our review illustrates that program visualization systems for beginners are often short-lived research prototypes that support the user-controlled viewing of program animations; a recent trend is to support more engaging modes of user interaction. The results of evaluations largely support the use of program visualization in introductory programming education, but research to date is insufficient for drawing more nuanced conclusions with respect to learner engagement. On the basis of our review, we identify interesting questions to answer for future research in relation to themes such as engagement, the authenticity of learning tasks, cognitive load, and the integration of program visualization into introductory programming pedagogy.},
  keywords = {CS1,engagement taxonomy,Introductory programming education,literature review,notional machine,program dynamics,program visualization,software visualization},
  file = {/Users/bedmison/Zotero/storage/GL3XYARG/Sorva et al. - 2013 - A Review of Generic Program Visualization Systems .pdf}
}

@article{sosnovsky_development_2006,
  title = {Development of {{Educational Ontology}} for {{C-Programming}}},
  author = {Sosnovsky, Sergey and Gavrilova, Tatiana},
  year = {2006},
  journal = {International Journal "Information Theories \& Applications},
  volume = {13},
  number = {4},
  pages = {303--308},
  publisher = {{Institute of Information Theories and Applications FOI ITHEA}},
  issn = {1313-0463},
  abstract = {Development of educational ontologies is a step towards creation of sharable and reusable adaptive  educational systems. Ontology as a conceptual courseware structure may work as a mind tool for effective  teaching and as a visual navigation interface to the learning objects. The paper discusses an approach to the  practical ontology development and presents the designed ontology for teaching/learning C programming.},
  langid = {english},
  annotation = {Accepted: 2009-12-20T23:18:02Z},
  file = {/Users/bedmison/Zotero/storage/EN9QLAWX/Sosnovsky and Gavrilova - DEVELOPMENT OF EDUCATIONAL ONTOLOGY FOR C-PROGRAMM.pdf;/Users/bedmison/Zotero/storage/F4GBXWGM/761.html}
}

@inproceedings{spacco_analyzing_2015,
  title = {Analyzing {{Student Work Patterns Using Programming Exercise Data}}},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Spacco, Jaime and Denny, Paul and Richards, Brad and Babcock, David and Hovemeyer, David and Moscola, James and Duvall, Robert},
  year = {2015},
  month = feb,
  series = {{{SIGCSE}} '15},
  pages = {18--23},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2676723.2677297},
  abstract = {Web-based programming exercises are a useful way for students to practice and master essential concepts and techniques presented in introductory programming courses. Although these systems are used fairly widely, we have a limited understanding of how students use these systems, and what can be learned from the data collected by these systems. In this paper, we perform a preliminary exploratory analysis of data collected by the CloudCoder programming exercise system from five introductory courses taught in two programming languages across three colleges and universities. We explore a number of interesting correlations in the data that confirm existing hypotheses. Finally, and perhaps most importantly, we demonstrate the effectiveness and future potential of systems like CloudCoder to help us study novice programmers.},
  isbn = {978-1-4503-2966-8},
  keywords = {outcomes,programming exercises,student work patterns},
  file = {/Users/bedmison/Zotero/storage/DZXNIDJI/Spacco et al. - 2015 - Analyzing Student Work Patterns Using Programming .pdf}
}

@article{van_merrienboer_instructional_1987,
  title = {Instructional Strategies and Tactics for the Design of Introductory Computer Programming Courses in High School},
  author = {Van Merrienboer, Jeroen J. G. and Krammer, Hein P. M.},
  year = {1987},
  month = sep,
  journal = {Instructional Science},
  volume = {16},
  number = {3},
  pages = {251--285},
  issn = {1573-1952},
  doi = {10.1007/BF00120253},
  abstract = {This article offers an examination of instructional strategies and tactics for the design of introductory computer programming courses in high school. We distinguish the Expert, Spiral and Reading approach as groups of instructional strategies that mainly differ in their general design plan to control students' processing load. In order, they emphasize topdown program design, incremental learning, and program modification and amplification. In contrast, tactics are specific design plans that prescribe methods to reach desired learning outcomes under given circumstances. Based on ACT* (Anderson, 1983) and relevant research, we distinguish between declarative and procedural instruction and present six tactics which can be used both to design courses and to evaluate strategies. Three tactics for declarative instruction involve concrete computer models, programming plans and design diagrams; three tactics for procedural instruction involve worked-out examples, practice of basic cognitive skills and task variation. In our evaluation of groups of instructional strategies, the Reading approach has been found to be superior to the Expert and Spiral approaches.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/4I7L9Z4B/Van Merrienboer and Krammer - 1987 - Instructional strategies and tactics for the desig.pdf}
}

@inproceedings{veeramachaneni_moocdb_2013,
  title = {{{MOOCdb}}: {{Developing Standards}} and {{Systems}} to {{Support MOOC Data Science}}},
  shorttitle = {{{MOOCdb}}},
  booktitle = {1st {{Workshop}} on {{Massive Open Online Courses}} at the 16th {{Annual Conference}} on {{Artificial Intelligence}} in {{Education}}},
  author = {Veeramachaneni, Kalyan and Halawa, Sherif and Dernoncourt, Franck and O'Reilly, Una-May and Taylor, Colin and Do, Chuong},
  year = {2013},
  eprint = {1406.2015},
  eprinttype = {arxiv},
  abstract = {We present a shared data model for enabling data science in Massive Open Online Courses (MOOCs). The model captures students interactions with the online platform. The data model is platform agnostic and is based on some basic core actions that students take on an online learning platform. Students usually interact with the platform in four different modes: Observing, Submitting, Collaborating and giving feedback. In observing mode students are simply browsing the online platform, watching videos, reading material, reading book or watching forums. In submitting mode, students submit information to the platform. This includes submissions towards quizzes, homeworks, or any assessment modules. In collaborating mode students interact with other students or instructors on forums, collaboratively editing wiki or chatting on google hangout or other hangout venues. With this basic definitions of activities, and a data model to store events pertaining to these activities, we then create a common terminology to map Coursera and edX data into this shared data model. This shared data model called MOOCdb becomes the foundation for a number of collaborative frameworks that enable progress in data science without the need to share the data.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computers and Society,Computer Science - Databases,Computer Science - Information Retrieval},
  file = {/Users/bedmison/Zotero/storage/Z552U22A/Veeramachaneni et al. - 2014 - MOOCdb Developing Standards and Systems to Suppor.pdf;/Users/bedmison/Zotero/storage/7XS2L7U2/1406.html}
}

@article{weragama_analysing_2014,
  title = {Analysing {{Student Programs}} in the {{PHP Intelligent Tutoring System}}},
  author = {Weragama, Dinesha and Reye, Jim},
  year = {2014},
  month = jun,
  journal = {International Journal of Artificial Intelligence in Education},
  volume = {24},
  number = {2},
  pages = {162--188},
  issn = {1560-4306},
  doi = {10.1007/s40593-014-0014-z},
  abstract = {Programming is a subject that many beginning students find difficult. The PHP Intelligent Tutoring System (PHP ITS) has been designed with the aim of making it easier for novices to learn the PHP language in order to develop dynamic web pages. Programming requires practice. This makes it necessary to include practical exercises in any ITS that supports students learning to program. The PHP ITS works by providing exercises for students to solve and then providing feedback based on their solutions. The major challenge here is to be able to identify many semantically equivalent solutions to a single exercise. The PHP ITS achieves this by using theories of Artificial Intelligence (AI) including first-order predicate logic and classical and hierarchical planning to model the subject matter taught by the system. This paper highlights the approach taken by the PHP ITS to analyse students' programs that include a number of program constructs that are used by beginners of web development. The PHP ITS was built using this model and evaluated in a unit at the Queensland University of Technology. The results showed that it was capable of correctly analysing over 96~\% of the solutions to exercises supplied by students.},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/TE4D42SU/Weragama and Reye - 2014 - Analysing Student Programs in the PHP Intelligent .pdf}
}

@inproceedings{yudelson_user_2007,
  title = {A {{User Modeling Server}} for {{Contemporary Adaptive Hypermedia}}: {{An Evaluation}} of the {{Push Approach}} to {{Evidence Propagation}}},
  shorttitle = {A {{User Modeling Server}} for {{Contemporary Adaptive Hypermedia}}},
  booktitle = {User {{Modeling}} 2007},
  author = {Yudelson, Michael and Brusilovsky, Peter and Zadorozhny, Vladimir},
  editor = {Conati, Cristina and McCoy, Kathleen and Paliouras, Georgios},
  year = {2007},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {27--36},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-73078-1_6},
  abstract = {Despite the growing popularity of user modeling servers, little attention has been paid to optimizing and evaluating the performance of these servers. We argue that implementation issues and their influence on server performance should become the central focus of the user modeling community, since there is a sharply increasing real-life load on user modeling servers, This paper focuses on a specific implementation-level aspect of user modeling servers \textendash{} the choice of push or pull approaches to evidence propagation. We present a new push-based implementation of our user modeling server CUMULATE and compare its performance with the performance of the original pull-based CUMULATE server.},
  isbn = {978-3-540-73078-1},
  langid = {english},
  file = {/Users/bedmison/Zotero/storage/N5B5FWDW/Yudelson et al. - 2007 - A User Modeling Server for Contemporary Adaptive H.pdf}
}

@article{zanden_codeassessor_2012,
  title = {Codeassessor: An Interactive, Web-Based Tool for Introductory Programming},
  shorttitle = {Codeassessor},
  author = {Zanden, Brad Vander and Anderson, David and Taylor, Curtis and Davis, Will and Berry, Michael W.},
  year = {2012},
  month = dec,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {28},
  number = {2},
  pages = {73--80},
  issn = {1937-4771},
  abstract = {This paper describes CodeAssessor, a web-based assessment tool for CS1 courses that is meant to both assess student's code and to provide immediate feedback to students. The tool provides a web-based form that allows an instructor to enter a program and designate parts of the program as code blocks that are to be completed by the student. For each code block the instructor provides a set of instructions, solution code, and a scoring rubric. The instructor also provides a set of test cases for the entire program. Students complete the problem by writing a block at a time and testing their code using their own test cases. Any empty blocks are compiled using the instructor-provided code. Students may submit code blocks at any time for automatic grading by CodeAssessor. If the student's code does not compile, or the student's output does not match the instructor's output, the student is given appropriate feedback and is allowed to try again. The student is shown the instructor's code either upon correct completion of the code block, when the points available for the code block become 0, or the student gives up. This tool can be used for homework assignments, for exam problems, or for in-class assignments. Although the current language is C++, a one-line change to a couple PhP scripts is all that is required to change the compiler and execution environment to another language, such as Java. By providing the student with portions of the program, and by displaying the instructor's model solution code, we hope to help students move through a problem more expeditiously and with greater understanding.},
  file = {/Users/bedmison/Zotero/storage/9SEB8IC9/Zanden et al. - 2012 - Codeassessor an interactive, web-based tool for i.pdf}
}


